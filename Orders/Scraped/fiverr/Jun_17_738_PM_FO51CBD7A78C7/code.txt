// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© atraderstoolbox

//@version=5
strategy("for_jlirano_61522", overlay=true)

//
//SUPERTREND
//
atrPeriod = input(10, "ATR Length", group = "Supertrend Settings")
factor = input.float(3.0, "Factor", step = 0.01, group = "Supertrend Settings")
timeframe = input.timeframe('30', title = 'Timeframe', group = "Supertrend Settings")

pine_supertrend(factor, atrPeriod, timeframe) =>
	src = request.security(syminfo.tickerid, timeframe, hl2[1], lookahead = barmerge.lookahead_on)
	close_src = request.security(syminfo.tickerid, timeframe, close[1], lookahead = barmerge.lookahead_on)
	close_src2 = request.security(syminfo.tickerid, timeframe, close[2], lookahead = barmerge.lookahead_on)
	atr = request.security(syminfo.tickerid, timeframe, ta.atr(atrPeriod)[1], lookahead = barmerge.lookahead_on)
	upperBand = src + factor * atr
	lowerBand = src - factor * atr
	prevLowerBand = nz(lowerBand[1])
	prevUpperBand = nz(upperBand[1])

	lowerBand := lowerBand > prevLowerBand or close_src2 < prevLowerBand ? lowerBand : prevLowerBand
	upperBand := upperBand < prevUpperBand or close_src2 > prevUpperBand ? upperBand : prevUpperBand
	int direction = na
	float superTrend = na
	prevSuperTrend = superTrend[1]
	if na(atr[1])
		direction := 1
	else if prevSuperTrend == prevUpperBand
		direction := close_src > upperBand ? -1 : 1
	else
		direction := close_src < lowerBand ? 1 : -1
	superTrend := direction == -1 ? lowerBand : upperBand
	[superTrend, direction]

[supertrend, direction] = pine_supertrend(factor, atrPeriod, timeframe)
st_long = direction < 0
st_short = direction >= 0 
bodyMiddle = plot((open + close) / 2, display=display.none)
upTrend = plot(st_long ? supertrend : na, "Up Trend", color = color.green, style=plot.style_linebr)
downTrend = plot(st_short ? supertrend : na, "Down Trend", color = color.red, style=plot.style_linebr)

fill(bodyMiddle, upTrend, color.new(color.green, 90), fillgaps=false)
fill(bodyMiddle, downTrend, color.new(color.red, 90), fillgaps=false)


//
//RSI_BB
//

ma(source, length, type) => 
    return_value = switch type
        "SMA" => ta.sma(source, length)
        "Bollinger Bands" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)
    return_value
    
f_bb(src, basis, length, mult) =>
    float dev = mult * ta.stdev(src, length)
    [basis, basis + dev, basis - dev]

rsiLengthInput = input.int(50, minval=1, title="RSI Length", group="RSI/MA Settings")
rsiSourceInput = input.source(hlc3, "Source", group="RSI/MA Settings")
maTypeInput = input.string("EMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="RSI/MA Settings")
maLengthInput = input.int(100, title="MA Length", group="RSI/MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="RSI/MA Settings")

rsi = ta.rsi(rsiSourceInput,rsiLengthInput)
rsi_ma = ma(rsi, maLengthInput, maTypeInput)
[pineMiddle, pineUpper, pineLower] = f_bb(rsi, rsi_ma, maLengthInput, bbMultInput)

// plot(rsi_value, color = color.new(#7e57c2,0))
// plot(pineMiddle, color = color.yellow)
// plot(pineUpper)
// plot(pineLower)

rsi_long = ta.crossover(rsi, pineLower)
rsi_short = ta.crossunder(rsi, pineUpper)


//
//MA EXIT
//
ma_exit_length = input.int(26, title = 'MA Length', group = 'MA Exit Settings')
ma_exit_type = input.string("EMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Exit Settings")

ma_exit = ma(close, ma_exit_length, ma_exit_type)
ma_long_exit = ta.crossunder(close, ma_exit)
ma_short_exit = ta.crossover(close, ma_exit)


//
//STRATEGY
//
strategy_start = input.time(timestamp("01 January 2020 00:00:00 UTC-5"), "Start Date", group = " Strategy Settings", inline = '1', tooltip = "This can be used as a start date for backteseting if you only wanted to backtest the last 3 months, last year, etc. There
     is a pinescript limitation for how far you can go back.")
use_trading_hours = input.bool(false, title = " ", group = " Strategy Settings", inline = '2')
trading_time = input.session("0930-1600", title = "Trading Time", tooltip = "This can be used if you only want to trade during certain hours of the day. This uses Eastern Time Zone or U.S. NY Market Hours.", group = " Strategy Settings", inline = '2')
trading_hours_cond = not use_trading_hours or time("",trading_time, "America/New_York")

long_trades = input.bool(true, title = "Long Trades", tooltip = "Do we want to take long trades?" , group = " Strategy Settings", inline = '3')
short_trades = input.bool(true, title = "Short Trades", tooltip = "Do we want to take short trades?" , group = " Strategy Settings", inline = '4')

long_entry = long_trades and trading_hours_cond and st_long and rsi_long
long_exit = long_trades and trading_hours_cond and ma_long_exit

short_entry = short_trades and trading_hours_cond and st_short and rsi_short
short_exit = short_trades and trading_hours_cond and ma_short_exit

past_strategy_start_date = time >= strategy_start ? true : false

if past_strategy_start_date
    //ORDERS
    strategy.close("LE", when = long_exit, comment = "LX")
    strategy.close("SS_E", when = short_exit, comment = "SS_X")
    
    strategy.entry("LE", direction = strategy.long, when = long_entry) 
    strategy.entry("SS_E", direction = strategy.short, when = short_entry) 


    strategy.close_all(when = not trading_hours_cond, comment = 'TX')
