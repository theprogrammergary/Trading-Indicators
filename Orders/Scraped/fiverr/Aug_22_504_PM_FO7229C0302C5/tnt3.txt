//@version=5
indicator('Team Nasdaq Trader', 'TNT', true, max_boxes_count = 500, max_labels_count = 500, max_lines_count = 500)

i_showPipsy = input.bool(true, "Show Trendy Pipsy")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TWAP

smoothing_twap = input(14)
resolution_twap = input('0', 'Timeframe')  //240 D
src_twap = input(ohlc4)
res_twap = resolution_twap != '0' ? resolution_twap : timeframe.period
weight_twap = ta.barssince(ta.change(request.security(syminfo.tickerid, res_twap, time, lookahead=barmerge.lookahead_on)))
price_twap = 0.
price_twap := weight_twap == 0 ? src_twap : src_twap + nz(price_twap[1])
twap = price_twap / (weight_twap + 1)
ma_twap = smoothing_twap < 2 ? twap : ta.sma(twap, smoothing_twap)
bullish_twap = smoothing_twap < 2 ? src_twap >= ma_twap : src_twap > ma_twap
disposition_twap = bullish_twap ? color.lime : color.red
basis_twap = plot(src_twap, 'OHLC4', disposition_twap, linewidth=1, transp=100)
work_twap = plot(ma_twap, 'TWAP', disposition_twap, linewidth=2, transp=20)
fill(basis_twap, work_twap, disposition_twap, transp=65)

showcross_twap = input(false, title='Show Buy/Sell')
crossup_twap = ma_twap[1] < src_twap[1] and ma_twap > src_twap
crossdn_twap = ma_twap[1] > src_twap[1] and ma_twap < src_twap
plotshape(showcross_twap and crossup_twap and not crossup_twap[1] ? src_twap : na, location=location.absolute, style=shape.labeldown, color=color.new(color.red, 0), size=size.tiny, text='Sell', textcolor=color.new(#ffffff, 0), offset=-1)
plotshape(showcross_twap and crossdn_twap and not crossdn_twap[1] ? src_twap : na, location=location.absolute, style=shape.labelup, color=color.new(color.lime, 0), size=size.tiny, text='Buy', textcolor=color.new(#ffffff, 0), offset=-1)



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Trendy Pipsy

length_pip = input.int(20, minval=1)
src_pip = input(close, title='Source')
mult_pip = input.float(2.0, minval=0.001, maxval=50)
basis_pip = ta.sma(src_pip, length_pip)
dev_pip = mult_pip * ta.stdev(src_pip, length_pip)
upper_pip = basis_pip + dev_pip
lower_pip = basis_pip - dev_pip


filterBW = input(false, title='filter Bill Williams Fractals:')
isRegularFractal(mode) =>
    ret = mode == 1 ? high[4] < high[3] and high[3] < high[2] and high[2] > high[1] and high[1] > high[0] : mode == -1 ? low[4] > low[3] and low[3] > low[2] and low[2] < low[1] and low[1] < low[0] : false
    ret
isBWFractal(mode) =>
    ret = mode == 1 ? high[4] < high[2] and high[3] <= high[2] and high[2] >= high[1] and high[2] > high[0] : mode == -1 ? low[4] > low[2] and low[3] >= low[2] and low[2] <= low[1] and low[2] < low[0] : false
    ret
filteredtopf = filterBW ? isRegularFractal(1) : isBWFractal(1)
filteredbotf = filterBW ? isRegularFractal(-1) : isBWFractal(-1)

plotshape(i_showPipsy ? filteredtopf : na, title='Filtered Top Fractals', style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 90), offset=-2)
plotshape(i_showPipsy ? filteredbotf : na, title='Filtered Bottom Fractals', style=shape.triangleup, location=location.belowbar, color=color.new(color.lime, 90), offset=-2)

short_pip = filteredtopf and high[2] > upper_pip[2]
long_pip = filteredbotf and low[2] < lower_pip[2]

plotshape(i_showPipsy ? short_pip : na, title='Signaled Top Fractals', style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), offset=-2)
plotshape(i_showPipsy ? long_pip : na, title='Signaled Bottom Fractals', style=shape.triangleup, location=location.belowbar, color=color.new(color.lime, 0), offset=-2)


// RSI Settings for user
rsiSource = input(title='RSI Source', defval=close)
rsiLength = input(title='RSI Length', defval=7)
rsiOverbought = input.int(title='RSI Overbought', defval=70, minval=51, maxval=100)
rsiOvesold = input.int(title='RSI Oversold', defval=30, minval=1, maxval=49)

// RSI value based on inbuilt RSI
rsiValue = ta.rsi(rsiSource, rsiLength)

// Get the current state
isOverbought = rsiValue >= rsiOverbought
isOversold = rsiValue <= rsiOvesold

// State of the last extreme 0 for initialization, 1 = overbought, 2 = oversold
var laststate_pip = 0

// Highest and Lowest prices since the last state change
var hh_pip = low
var ll_pip = high

// Labels
var label labelll_pip = na
var label labelhh_pip = na

// Swing lines
var line line_up_pip = na
var line line_down_pip = na

var last_actual_label_hh_price = 0.0
var last_actual_label_ll_price = 0.0


// FUNCTIONS
obLabelText() =>
    if last_actual_label_hh_price < high
        'HH'
    else
        'LH'
//plot(last_actual_label_hh_price)
osLabelText() =>
    if last_actual_label_ll_price < low
        'HL'
    else
        'LL'

pos_top = high + ta.atr(30) * 0.5
pos_bottom = low - ta.atr(30) * 0.5

// Create oversold or overbought label
createOverBoughtLabel(isIt) =>
    if isIt and i_showPipsy
        label.new(x=bar_index, y=pos_top, style=label.style_label_down, color=color.new(color.red, 0), size=size.small, text=obLabelText(), textcolor=color.new(color.white, 0))
    else if i_showPipsy
        label.new(x=bar_index, y=pos_bottom, style=label.style_label_up, color=color.new(color.green, 0), size=size.small, text=osLabelText(), textcolor=color.new(color.white, 0))


// Move the oversold swing and label
moveOversoldLabel() =>
    label.set_x(labelll_pip, bar_index)
    label.set_y(labelll_pip, low)
    label.set_text(labelll_pip, osLabelText())
    line.set_x1(line_down_pip, bar_index)
    line.set_y1(line_down_pip, low)

moveOverBoughtLabel() =>
    label.set_x(labelhh_pip, bar_index)
    label.set_y(labelhh_pip, high)
    label.set_text(labelhh_pip, obLabelText())
    line.set_x1(line_up_pip, bar_index)
    line.set_y1(line_up_pip, high)

// We go from oversold straight to overbought NEW DRAWINGS CREATED HERE
if laststate_pip == 2 and isOverbought
    hh_pip := high
    labelhh_pip := createOverBoughtLabel(true)
    last_actual_label_ll_price := label.get_y(labelll_pip)
    labelll_ts = label.get_x(labelll_pip)
    labelll_price = label.get_y(labelll_pip)
    line_up_pip := i_showPipsy ? line.new(x1=bar_index, y1=high, x2=labelll_ts, y2=labelll_price, width=1) : na
    line_up_pip

// We go from overbought straight to oversold  NEW DRAWINGS CREATED HERE
if laststate_pip == 1 and isOversold
    ll_pip := low
    labelll_pip := createOverBoughtLabel(false)
    last_actual_label_hh_price := label.get_y(labelhh_pip)
    labelhh_ts = label.get_x(labelhh_pip)
    labelhh_price = label.get_y(labelhh_pip)
    line_down_pip := i_showPipsy ? line.new(x1=bar_index, y1=high, x2=labelhh_ts, y2=labelhh_price, width=1) : na
    line_down_pip


// If we are overbought
if isOverbought
    if high >= hh_pip
        hh_pip := high
        moveOverBoughtLabel()
    laststate_pip := 1
    laststate_pip


// If we are oversold
if isOversold
    if low <= ll_pip
        ll_pip := low
        moveOversoldLabel()
    laststate_pip := 2
    laststate_pip


// If last state was overbought and we are overbought
if laststate_pip == 1 and isOverbought
    if hh_pip <= high
        hh_pip := high
        moveOverBoughtLabel()

//If we are oversold and the last state was oversold, move the drawings to the lowest price
if laststate_pip == 2 and isOversold
    if low <= ll_pip
        ll_pip := low
        moveOversoldLabel()


// If last state was overbought
if laststate_pip == 1
    if hh_pip <= high
        hh_pip := high
        moveOverBoughtLabel()

// If last stare was oversold
if laststate_pip == 2
    if ll_pip >= low
        ll_pip := low
        moveOversoldLabel()

sz_pip = isOverbought and hh_pip != hh_pip[1]
bz_pip = isOversold and ll_pip != ll_pip[1]


n_pip = 2
upFractal = high[n_pip + 2] < high[n_pip] and high[n_pip + 1] < high[n_pip] and high[n_pip - 1] < high[n_pip] and high[n_pip - 2] < high[n_pip] or high[n_pip + 3] < high[n_pip] and high[n_pip + 2] < high[n_pip] and high[n_pip + 1] == high[n_pip] and high[n_pip - 1] < high[n_pip] and high[n_pip - 2] < high[n_pip] or high[n_pip + 4] < high[n_pip] and high[n_pip + 3] < high[n_pip] and high[n_pip + 2] == high[n_pip] and high[n_pip + 1] <= high[n_pip] and high[n_pip - 1] < high[n_pip] and high[n_pip - 2] < high[n_pip] or high[n_pip + 5] < high[n_pip] and high[n_pip + 4] < high[n_pip] and high[n_pip + 3] == high[n_pip] and high[n_pip + 2] == high[n_pip] and high[n_pip + 1] <= high[n_pip] and high[n_pip - 1] < high[n_pip] and high[n_pip - 2] < high[n_pip] or high[n_pip + 6] < high[n_pip] and high[n_pip + 5] < high[n_pip] and high[n_pip + 4] == high[n_pip] and high[n_pip + 3] <= high[n_pip] and high[n_pip + 2] == high[n_pip] and high[n_pip + 1] <= high[n_pip] and high[n_pip - 1] < high[n_pip] and high[n_pip - 2] < high[n_pip]

dnFractal = low[n_pip + 2] > low[n_pip] and low[n_pip + 1] > low[n_pip] and low[n_pip - 1] > low[n_pip] and low[n_pip - 2] > low[n_pip] or low[n_pip + 3] > low[n_pip] and low[n_pip + 2] > low[n_pip] and low[n_pip + 1] == low[n_pip] and low[n_pip - 1] > low[n_pip] and low[n_pip - 2] > low[n_pip] or low[n_pip + 4] > low[n_pip] and low[n_pip + 3] > low[n_pip] and low[n_pip + 2] == low[n_pip] and low[n_pip + 1] >= low[n_pip] and low[n_pip - 1] > low[n_pip] and low[n_pip - 2] > low[n_pip] or low[n_pip + 5] > low[n_pip] and low[n_pip + 4] > low[n_pip] and low[n_pip + 3] == low[n_pip] and low[n_pip + 2] == low[n_pip] and low[n_pip + 1] >= low[n_pip] and low[n_pip - 1] > low[n_pip] and low[n_pip - 2] > low[n_pip] or low[n_pip + 6] > low[n_pip] and low[n_pip + 5] > low[n_pip] and low[n_pip + 4] == low[n_pip] and low[n_pip + 3] >= low[n_pip] and low[n_pip + 2] == low[n_pip] and low[n_pip + 1] >= low[n_pip] and low[n_pip - 1] > low[n_pip] and low[n_pip - 2] > low[n_pip]

Depth_pip = input.int(24, 'Depth_pip', minval=1, step=1)
Deviation_pip = input.int(5, 'Deviation_pip', minval=1, step=1)

var lastlow_pip = 0.0
var lasthigh_pip = 0.0
data(x) =>
    request.security(syminfo.tickerid, timeframe.period, x)
cc(x) =>
    x == 'Red' ? color.red : x == 'Lime' ? color.lime : x == 'Orange' ? color.orange : x == 'Teal' ? color.teal : x == 'Yellow' ? color.yellow : x == 'Black' ? color.black : color.white

getLow(x, y, z, a) =>
    ll = y
    v = data(x)
    m = v == ll or data(z) - v > a * syminfo.mintick
    if v != ll
        ll := v
        ll
    if m
        v := 0.0
        v
    [v, ll]
getHigh(x, y, z, a) =>
    lh = y
    v = data(x)
    m = v == lh or v - data(z) > a * syminfo.mintick
    if v != lh
        lh := v
        lh
    if m
        v := 0.0
        v
    [v, lh]
[v, e] = getLow(ta.lowest(Depth_pip), lastlow_pip, low, Deviation_pip)
lastlow_pip := e
zBB = v != 0.0
[v1, e1] = getHigh(ta.highest(Depth_pip), lasthigh_pip, high, Deviation_pip)
lasthigh_pip := e1
zSS = v1 != 0.0
d = 0
zigzagHigh = 0
zigzagLow = 0
d := zBB ? 1 : zSS ? -1 : nz(d[1], 0)
virtualLow = zigzagLow[1] + 1
if not zBB or zBB and d == d[1] and low > low[virtualLow]
    zigzagLow := nz(zigzagLow[1]) + 1
    zigzagLow
virtualHigh = zigzagHigh[1] + 1
if not zSS or zSS and d == d[1] and high < high[virtualHigh]
    zigzagHigh := nz(zigzagHigh[1]) + 1
    zigzagHigh
direction_changed = d != d[1]

x1 = bar_index - zigzagLow
x2 = bar_index - zigzagHigh
y1 = low[zigzagLow]
y2 = high[zigzagHigh]

buy_pip = ta.barssince(dnFractal and zBB[2])
label buy_label = i_showPipsy ? label.new(bar_index[buy_pip + 2], 0, 'BUY', xloc.bar_index, yloc.belowbar, color.lime, label.style_triangleup) : na
sell_pip = ta.barssince(upFractal and zSS[2])
label sell_label = i_showPipsy ? label.new(bar_index[sell_pip + 2], 0, 'SELL', xloc.bar_index, yloc.abovebar, color.red, label.style_triangledown) : na

if d == d[1]
    label.delete(buy_label[1])
    label.delete(sell_label[1])

//ALERT
//TrendPipsy
alertcondition(dnFractal and zBB[2] and i_showPipsy, 'TrendPipsy BUY')
alertcondition(upFractal and zSS[2] and i_showPipsy, 'TrendPipsy SELL')

//MCF
alertcondition(sz_pip[2] and short_pip and i_showPipsy, 'SELL Fractal Tag')
alertcondition(bz_pip[2] and long_pip and i_showPipsy, 'BUY Fractal Tag')

// alertcondition(long_pip, "Buy Alert", "Buy")
// alertcondition(short_pip, "Sell Alert", "Sell")

alertcondition(dnFractal and zBB[2] and bz_pip[2] and long_pip and i_showPipsy, 'COMBINED BUY')
alertcondition(upFractal and zSS[2] and sz_pip[2] and short_pip and i_showPipsy, 'COMBINED SELL')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Swing HL

// Inputs
pvtLenL = input.int(16, minval=1, title='Pivot Length Left Hand Side')
pvtLenR = input.int(16, minval=1, title='Pivot Length Right Hand Side')
showStop = input(true, title='Show Recent Low Stop?')

// Get High and Low Pivot Points
pvthi_ = ta.pivothigh(high, pvtLenL, pvtLenR)
pvtlo_ = ta.pivotlow(low, pvtLenL, pvtLenR)

// Force Pivot completion before plotting.
Shunt = 1  //Wait for close before printing pivot? 1 for true 0 for flase
maxLvlLen = 0  //Maximum Extension Length
pvthi = pvthi_[Shunt]
pvtlo = pvtlo_[Shunt]

// Count How many candles for current Pivot Level, If new reset.
counthi = ta.barssince(not na(pvthi))
countlo = ta.barssince(not na(pvtlo))

pvthis = fixnan(pvthi)
pvtlos = fixnan(pvtlo)
hipc = ta.change(pvthis) != 0 ? na : color.maroon
lopc = ta.change(pvtlos) != 0 ? na : color.green

// Display Pivot lines
plot(maxLvlLen == 0 or counthi < maxLvlLen ? pvthis : na, color=hipc, linewidth=1, offset=-pvtLenR - Shunt, title='Top Levels', transp=0)
plot(maxLvlLen == 0 or countlo < maxLvlLen ? pvtlos : na, color=lopc, linewidth=1, offset=-pvtLenR - Shunt, title='Bottom Levels', transp=0)
plot(maxLvlLen == 0 or counthi < maxLvlLen ? pvthis : na, color=hipc, linewidth=1, offset=0, title='Top Levels 2', transp=0)
plot(maxLvlLen == 0 or countlo < maxLvlLen ? pvtlos : na, color=lopc, linewidth=1, offset=0, title='Bottom Levels 2', transp=0)

// Stop Levels
stopLevel_hl = ta.valuewhen(pvtlo_, low[pvtLenR], 0)
plotStopLevel_hl = showStop == true ? stopLevel_hl : na
plot(plotStopLevel_hl, style=plot.style_linebr, color=color.new(color.orange, 50), show_last=1, linewidth=2, trackprice=true)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Liquidity Heatmap

// --------------- INPUTS ---------------
var GRP1 = "•••••••••• INTRADAY TIMEFRAMES ••••••••••"
// 1
ltimeframe1Show = input.bool(true, title='', inline='1', group=GRP1)
ltimeframe1 = input.timeframe('15', title='', inline='1', group=GRP1)
lleftBars1 = input.int(defval=7, title='Left', minval=2, maxval=20, group=GRP1, inline='1')
lrightBars1 = input.int(defval=7, title='Right', minval=2, maxval=20, group=GRP1, inline='1', tooltip="Highest/lowest point in x right and left bars.")

// 2
ltimeframe2Show = input.bool(true, title='', inline='2', group=GRP1)
ltimeframe2 = input.timeframe('30', title='', inline='2', group=GRP1)
lleftBars2 = input.int(defval=7, title='Left', minval=2, maxval=20, group=GRP1, inline='2')
lrightBars2 = input.int(defval=7, title='Right', minval=2, maxval=20, group=GRP1, inline='2', tooltip="Highest/lowest point in x right and left bars.")

// 3
ltimeframe3Show = input.bool(true, title='', inline='3', group=GRP1)
ltimeframe3 = input.timeframe('60', title='', inline='3', group=GRP1)
lleftBars3 = input.int(defval=7, title='Left', minval=2, maxval=20, group=GRP1, inline='3')
lrightBars3 = input.int(defval=6, title='Right', minval=2, maxval=20, group=GRP1, inline='3', tooltip="Highest/lowest point in x right and left bars.")

// 4
ltimeframe4Show = input.bool(true, title='', inline='4', group=GRP1)
ltimeframe4 = input.timeframe('120', title='', inline='4', group=GRP1)
lleftBars4 = input.int(defval=7, title='Left', minval=2, maxval=20, group=GRP1, inline='4')
lrightBars4 = input.int(defval=6, title='Right', minval=2, maxval=20, group=GRP1, inline='4', tooltip="Highest/lowest point in x right and left bars.")

// 5
ltimeframe5Show = input.bool(true, title='', inline='5', group=GRP1)
ltimeframe5 = input.timeframe('240', title='', inline='5', group=GRP1)
lleftBars5 = input.int(defval=6, title='Left', minval=2, maxval=20, group=GRP1, inline='5')
lrightBars5 = input.int(defval=6, title='Right', minval=2, maxval=20, group=GRP1, inline='5', tooltip="Highest/lowest point in x right and left bars.")

// 6
ltimeframe6Show = input.bool(true, title='', inline='6', group=GRP1)
ltimeframe6 = input.timeframe('D', title='', inline='6', group=GRP1)
lleftBars6 = input.int(defval=5, title='Left', minval=2, maxval=20, group=GRP1, inline='6')
lrightBars6 = input.int(defval=5, title='Right', minval=2, maxval=20, group=GRP1, inline='6', tooltip="Highest/lowest point in x right and left bars.")


var GRP2 = "•••••••••• HIGHER TIMEFRAMES (> 4HR) ••••••••••"
// 1
htimeframe1Show = input.bool(true, title='', inline='1', group=GRP2)
htimeframe1 = input.timeframe('480', title='', inline='1', group=GRP2)
hleftBars1 = input.int(defval=7, title='Left', minval=2, maxval=20, group=GRP2, inline='1')
hrightBars1 = input.int(defval=7, title='Right', minval=2, maxval=20, group=GRP2, inline='1', tooltip="Highest/lowest point in x right and left bars.")

// 2
htimeframe2Show = input.bool(true, title='', inline='2', group=GRP2)
htimeframe2 = input.timeframe('D', title='', inline='2', group=GRP2)
hleftBars2 = input.int(defval=7, title='Left', minval=2, maxval=20, group=GRP2, inline='2')
hrightBars2 = input.int(defval=7, title='Right', minval=2, maxval=20, group=GRP2, inline='2', tooltip="Highest/lowest point in x right and left bars.")

// 3
htimeframe3Show = input.bool(true, title='', inline='3', group=GRP2)
htimeframe3 = input.timeframe('3D', title='', inline='3', group=GRP2)
hleftBars3 = input.int(defval=7, title='Left', minval=2, maxval=20, group=GRP2, inline='3')
hrightBars3 = input.int(defval=6, title='Right', minval=2, maxval=20, group=GRP2, inline='3', tooltip="Highest/lowest point in x right and left bars.")

// 4
htimeframe4Show = input.bool(true, title='', inline='4', group=GRP2)
htimeframe4 = input.timeframe('W', title='', inline='4', group=GRP2)
hleftBars4 = input.int(defval=7, title='Left', minval=2, maxval=20, group=GRP2, inline='4')
hrightBars4 = input.int(defval=6, title='Right', minval=2, maxval=20, group=GRP2, inline='4', tooltip="Highest/lowest point in x right and left bars.")

// 5
htimeframe5Show = input.bool(true, title='', inline='5', group=GRP2)
htimeframe5 = input.timeframe('M', title='', inline='5', group=GRP2)
hleftBars5 = input.int(defval=6, title='Left', minval=2, maxval=20, group=GRP2, inline='5')
hrightBars5 = input.int(defval=6, title='Right', minval=2, maxval=20, group=GRP2, inline='5', tooltip="Highest/lowest point in x right and left bars.")

// 6
htimeframe6Show = input.bool(false, title='', inline='6', group=GRP2)
htimeframe6 = input.timeframe('2M', title='', inline='6', group=GRP2)
hleftBars6 = input.int(defval=5, title='Left', minval=2, maxval=20, group=GRP2, inline='6')
hrightBars6 = input.int(defval=5, title='Right', minval=2, maxval=20, group=GRP2, inline='6', tooltip="Highest/lowest point in x right and left bars.")

var GRP3 = "•••••••••• Other Settings ••••••••••"
hideLTF = input.bool(true, "Hide lines lower than enabled timeframes?", group = GRP3)
// --------------- INPUTS ---------------


// --------------- COLORS AND LENGTH ---------------
topColor1 = color.new(color.red, 70)
bottomColor1 = color.new(color.green, 70)
lineLength1 = 6

topColor2 = color.new(color.red, 60)
bottomColor2 = color.new(color.green, 60)
lineLength2 = 10

topColor3 = color.new(color.red, 50)
bottomColor3 = color.new(color.green, 50)
lineLength3 = 10

topColor4 = color.new(color.red, 40)
bottomColor4 = color.new(color.green, 40)
lineLength4 = 10

topColor5 = color.new(color.red, 30)
bottomColor5 = color.new(color.green, 30)
lineLength5 = 15

topColor6 = color.new(color.red, 20)
bottomColor6 = color.new(color.green, 20)
lineLength6 = 15
// --------------- COLORS AND LENGTH ---------------


// --------------- FUNCTIONS ---------------
getPivotData(lb, rb) =>
    ph = ta.pivothigh(lb, rb)
    phtimestart = ph ? time[rb-1] : na
    
    pl = ta.pivotlow(lb, rb)
    pltimestart = pl ? time[rb-1] : na
    
    [ph, phtimestart, pl, pltimestart]

getLineStyle(_style) =>
    _linestyle = _style == "Solid" ? line.style_solid : _style == "Dashed" ? line.style_dashed : line.style_dotted
    _linestyle

resolutionInMinutes(tf = "") =>
    chartTf = timeframe.multiplier * (timeframe.isseconds ? 1. / 60 : timeframe.isminutes ? 1. : timeframe.isdaily ? 60. * 24 : timeframe.isweekly ? 60. * 24 * 7 : timeframe.ismonthly ? 60. * 24 * 30.4375 : na)
    float result = tf == "" ? chartTf : request.security(syminfo.tickerid, tf, chartTf)

f_timeFrom(length, _units) =>
    int _timeFrom = na
    _unit = str.replace_all(_units, 's', '')
    _timeFrom := int(time + resolutionInMinutes() * 60 * 1000 * length)
    _timeFrom

notLowerTimeframe(tf) =>
    _cond = hideLTF ? resolutionInMinutes() < resolutionInMinutes(tf) : true
    _cond


//  ▓ ▒ ░ ░ 

generateText(_n = 5, _large = false) =>
    _symbol = "░"  
    _text = ""
    for i = _n to 0
        _text := _text + " "
    for i = _n to 0
        _text := _text + _symbol
    if _large
        _text := _text + "\n" + _text

    _text
// --------------- FUNCTIONS ---------------

isLtf = resolutionInMinutes() < resolutionInMinutes("240")

// --------------- Calculate Pivots ---------------
[phchart, phtimestartchart, plchart, pltimestartchart] = request.security(syminfo.tickerid, "5", getPivotData(6, 6), lookahead = barmerge.lookahead_on)

[lph1, lphtimestart1, lpl1, lpltimestart1] = request.security(syminfo.tickerid, ltimeframe1, getPivotData(lleftBars1, lrightBars1), lookahead = barmerge.lookahead_on)
[lph2, lphtimestart2, lpl2, lpltimestart2] = request.security(syminfo.tickerid, ltimeframe2, getPivotData(lleftBars2, lrightBars2), lookahead = barmerge.lookahead_on)
[lph3, lphtimestart3, lpl3, lpltimestart3] = request.security(syminfo.tickerid, ltimeframe3, getPivotData(lleftBars3, lrightBars3), lookahead = barmerge.lookahead_on)
[lph4, lphtimestart4, lpl4, lpltimestart4] = request.security(syminfo.tickerid, ltimeframe4, getPivotData(lleftBars4, lrightBars4), lookahead = barmerge.lookahead_on)
[lph5, lphtimestart5, lpl5, lpltimestart5] = request.security(syminfo.tickerid, ltimeframe5, getPivotData(lleftBars5, lrightBars5), lookahead = barmerge.lookahead_on)
[lph6, lphtimestart6, lpl6, lpltimestart6] = request.security(syminfo.tickerid, ltimeframe6, getPivotData(lleftBars6, lrightBars6), lookahead = barmerge.lookahead_on)

[hph1, hphtimestart1, hpl1, hpltimestart1] = request.security(syminfo.tickerid, htimeframe1, getPivotData(hleftBars1, hrightBars1), lookahead = barmerge.lookahead_on)
[hph2, hphtimestart2, hpl2, hpltimestart2] = request.security(syminfo.tickerid, htimeframe2, getPivotData(hleftBars2, hrightBars2), lookahead = barmerge.lookahead_on)
[hph3, hphtimestart3, hpl3, hpltimestart3] = request.security(syminfo.tickerid, htimeframe3, getPivotData(hleftBars3, hrightBars3), lookahead = barmerge.lookahead_on)
[hph4, hphtimestart4, hpl4, hpltimestart4] = request.security(syminfo.tickerid, htimeframe4, getPivotData(hleftBars4, hrightBars4), lookahead = barmerge.lookahead_on)
[hph5, hphtimestart5, hpl5, hpltimestart5] = request.security(syminfo.tickerid, htimeframe5, getPivotData(hleftBars5, hrightBars5), lookahead = barmerge.lookahead_on)
[hph6, hphtimestart6, hpl6, hpltimestart6] = request.security(syminfo.tickerid, htimeframe6, getPivotData(hleftBars6, hrightBars6), lookahead = barmerge.lookahead_on)

ph1 = isLtf ? lph1 : hph1
phtimestart1 = isLtf ? lphtimestart1 : hphtimestart1
pl1 = isLtf ? lpl1 : hpl1
pltimestart1 = isLtf ? lpltimestart1 : hpltimestart1

ph2 = isLtf ? lph2 : hph2
phtimestart2 = isLtf ? lphtimestart2 : hphtimestart2
pl2 = isLtf ? lpl2 : hpl2
pltimestart2 = isLtf ? lpltimestart2 : hpltimestart2

ph3 = isLtf ? lph3 : hph3
phtimestart3 = isLtf ? lphtimestart3 : hphtimestart3
pl3 = isLtf ? lpl3 : hpl3
pltimestart3 = isLtf ? lpltimestart3 : hpltimestart3

ph4 = isLtf ? lph4 : hph4
phtimestart4 = isLtf ? lphtimestart4 : hphtimestart4
pl4 = isLtf ? lpl4 : hpl4
pltimestart4 = isLtf ? lpltimestart4 : hpltimestart4

ph5 = isLtf ? lph5 : hph5
phtimestart5 = isLtf ? lphtimestart5 : hphtimestart5
pl5 = isLtf ? lpl5 : hpl5
pltimestart5 = isLtf ? lpltimestart5 : hpltimestart5

ph6 = isLtf ? lph6 : hph6
phtimestart6 = isLtf ? lphtimestart6 : hphtimestart6
pl6 = isLtf ? lpl6 : hpl6
pltimestart6 = isLtf ? lpltimestart6 : hpltimestart6

pivothighchart = na(phchart[1]) and phchart ? phchart : na
pivotlowchart  = na(plchart[1]) and plchart ? plchart : na

pivothigh1 = na(ph1[1]) and ph1 ? ph1 : na
pivotlow1  = na(pl1[1]) and pl1 ? pl1 : na

pivothigh2 = na(ph2[1]) and ph2 ? ph2 : na
pivotlow2  = na(pl2[1]) and pl2 ? pl2 : na

pivothigh3 = na(ph3[1]) and ph3 ? ph3 : na
pivotlow3  = na(pl3[1]) and pl3 ? pl3 : na

pivothigh4 = na(ph4[1]) and ph4 ? ph4 : na
pivotlow4  = na(pl4[1]) and pl4 ? pl4 : na

pivothigh5 = na(ph5[1]) and ph5 ? ph5 : na
pivotlow5  = na(pl5[1]) and pl5 ? pl5 : na

pivothigh6 = na(ph6[1]) and ph6 ? ph6 : na
pivotlow6  = na(pl6[1]) and pl6 ? pl6 : na
// --------------- Calculate Pivots ---------------

//  --------------- Add to array ---------------
var float[] pivothighs1 = array.new_float(0)
var float[] pivotlows1 = array.new_float(0)

var float[] pivothighs2 = array.new_float(0)
var float[] pivotlows2 = array.new_float(0)

var float[] pivothighs3 = array.new_float(0)
var float[] pivotlows3 = array.new_float(0)

var float[] pivothighs4 = array.new_float(0)
var float[] pivotlows4 = array.new_float(0)

var float[] pivothighs5 = array.new_float(0)
var float[] pivotlows5 = array.new_float(0)

var float[] pivothighs6 = array.new_float(0)
var float[] pivotlows6 = array.new_float(0)
//  --------------- Add to array ---------------


// --------------- Plot pivot points ---------------
// if barstate.islast
//     label.new(bar_index, high, str.tostring(resolutionInMinutes()) +"\n"+ str.tostring(resolutionInMinutes("3")))

// ONLY LOW TIMEFRAME > 3
showTimeframe1 = isLtf ? ltimeframe1Show : htimeframe1Show
validTimeframe1 = isLtf ? notLowerTimeframe(ltimeframe1) : notLowerTimeframe(htimeframe1)

if showTimeframe1 and pivothighchart and resolutionInMinutes() <= resolutionInMinutes("3")
    label.new(phtimestartchart, phchart, xloc=xloc.bar_time, text=generateText(12), style=label.style_none, textcolor=topColor1)
if showTimeframe1 and pivotlowchart and resolutionInMinutes() <= resolutionInMinutes("3")
    label.new(pltimestartchart, plchart, xloc=xloc.bar_time, text=generateText(12), style=label.style_none, textcolor=bottomColor1)

// Timeframe 1
if showTimeframe1 and pivothigh1 and validTimeframe1
    label.new(phtimestart1, ph1, xloc=xloc.bar_time, text=generateText(lineLength1), style=label.style_none, textcolor=topColor1)
if showTimeframe1 and pivotlow1 and validTimeframe1
    label.new(pltimestart1, pl1, xloc=xloc.bar_time, text=generateText(lineLength1), style=label.style_none, textcolor=bottomColor1)

// Timeframe 2
showTimeframe2 = isLtf ? ltimeframe2Show : htimeframe2Show
validTimeframe2 = isLtf ? notLowerTimeframe(ltimeframe2) : notLowerTimeframe(htimeframe2)
if showTimeframe2 and pivothigh2 and validTimeframe2
    label.new(phtimestart2, ph2, xloc=xloc.bar_time, text=generateText(lineLength2), style=label.style_none, textcolor=topColor2)
if showTimeframe2 and pivotlow2 and validTimeframe2
    label.new(pltimestart2, pl2, xloc=xloc.bar_time, text=generateText(lineLength2), style=label.style_none, textcolor=bottomColor2)

// Timeframe 3
showTimeframe3 = isLtf ? ltimeframe3Show : htimeframe3Show
validTimeframe3 = isLtf ? notLowerTimeframe(ltimeframe3) : notLowerTimeframe(htimeframe3)
if showTimeframe3 and pivothigh3 and validTimeframe3
    label.new(phtimestart3, ph3, xloc=xloc.bar_time, text=generateText(lineLength3), style=label.style_none, textcolor=topColor3)
if showTimeframe3 and pivotlow3 and validTimeframe3
    label.new(pltimestart3, pl3, xloc=xloc.bar_time, text=generateText(lineLength3), style=label.style_none, textcolor=bottomColor3)

// Timeframe 4
showTimeframe4 = isLtf ? ltimeframe4Show : htimeframe4Show
validTimeframe4 = isLtf ? notLowerTimeframe(ltimeframe4) : notLowerTimeframe(htimeframe4)
if showTimeframe4 and pivothigh4 and validTimeframe4
    label.new(phtimestart4, ph4, xloc=xloc.bar_time, text=generateText(lineLength4), style=label.style_none, textcolor=topColor4)
if showTimeframe4 and pivotlow4 and validTimeframe4
    label.new(pltimestart4, pl4, xloc=xloc.bar_time, text=generateText(lineLength4), style=label.style_none, textcolor=bottomColor4)

// Timeframe 5
showTimeframe5 = isLtf ? ltimeframe5Show : htimeframe5Show
validTimeframe5 = isLtf ? notLowerTimeframe(ltimeframe5) : notLowerTimeframe(htimeframe5)
if showTimeframe5 and pivothigh5 and validTimeframe5
    label.new(phtimestart5, ph5, xloc=xloc.bar_time, text=generateText(lineLength5, true), style=label.style_none, textcolor=topColor5)
if showTimeframe5 and pivotlow5 and validTimeframe5
    label.new(pltimestart5, pl5, xloc=xloc.bar_time, text=generateText(lineLength5, true), style=label.style_none, textcolor=bottomColor5)

// Timeframe 6
showTimeframe6 = isLtf ? ltimeframe6Show : htimeframe6Show
validTimeframe6 = isLtf ? notLowerTimeframe(ltimeframe6) : notLowerTimeframe(htimeframe6)
if showTimeframe6 and pivothigh6 and validTimeframe6
    label.new(phtimestart6, ph6, xloc=xloc.bar_time, text=generateText(lineLength6, true), style=label.style_none, textcolor=topColor6)
if showTimeframe6 and pivotlow6 and validTimeframe6
    label.new(pltimestart6, pl6, xloc=xloc.bar_time, text=generateText(lineLength6, true), style=label.style_none, textcolor=bottomColor6)
// --------------- Plot pivot points ---------------

plot(ta.sma(close, 105), title = 'The Money Line', linewidth=5, color = color.green)


// --------------- Equal highs ---------------


// WATERMARK
if barstate.islast    
    _table = table.new("bottom_left", 1, 1)
    table.cell(_table, 0, 0, text="@Nephew_Sam_", text_size=size.small, text_color=color.new(color.gray, 50))


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Asian session

timeinrange(res, sess) => time(res, sess) != 0

TD1 = color.gray

bgcolor(timeinrange("60","0000-0100") ? TD1 : na, transp=80, offset=0)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Levels

showYH = input.bool(true, "Show yesterday's high")
showMO = input.bool(true, "Show midnight open")
showYL = input.bool(true, "Show yesterday's low")

timezone_offset = input.string("UTC-4", title="Timezone")

var float midnightOpen = na
var int triggerTime = 0

yesterdays_high = request.security(syminfo.tickerid, "D", high)
yesterdays_low = request.security(syminfo.tickerid, "D", low)

if not na(time(timeframe.period, "0000-0001", timezone_offset)) and time > (triggerTime + 1000 * 60)
    midnightOpen := open
    triggerTime := time
    if showMO
        line.new(time, midnightOpen, time + (24*60*60*1000), midnightOpen, xloc=xloc.bar_time, color=color.red, style=line.style_dotted, width=2)
        label.new(time + (24*60*60*1000), midnightOpen, "Midnight Open", xloc=xloc.bar_time, color=na)

    if showYH
        line.new(time, yesterdays_high, time + (24*60*60*1000), yesterdays_high, xloc=xloc.bar_time, color=color.red, style=line.style_dotted, width=2)
        label.new(time + (24*60*60*1000), yesterdays_high, "Yesterday High", xloc=xloc.bar_time, color=na)
    
    if showYL
        line.new(time, yesterdays_low, time + (24*60*60*1000), yesterdays_low, xloc=xloc.bar_time, color=color.red, style=line.style_dotted, width=2)
        label.new(time + (24*60*60*1000), yesterdays_low, "Yesterday Low", xloc=xloc.bar_time, color=na)

