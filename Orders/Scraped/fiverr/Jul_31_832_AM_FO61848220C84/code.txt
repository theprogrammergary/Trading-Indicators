// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© atraderstoolbox

//@version=5
strategy("for_russellgilbert", overlay=true)


//
//MA
//
ma_price = input.source(close, title = 'MA Source', group = 'MA Settings')
ma_type = input.string("EMA", title="MA Type", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
ma_length = input.int(200, title = 'MA Length', group = 'MA Settings')

ma(source, length, type) => 
    return_value = switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)
    return_value

ma_value = ma(ma_price, ma_length, ma_type)
ma_plot = plot(ma_value, title = 'MA', color = close >= ma_value ? color.teal : color.red, linewidth = 3)


//
//MACD
//
macd_price = input.source(close, title = 'MACD Source', group = 'MACD Settings')
macd_fast = input.int(12, title = 'MACD Length', group = 'MACD Settings')
macd_slow = input.int(26, title = 'MACD Length', group = 'MACD Settings')
macd_signal = input.int(9, title = 'MACD Length', group = 'MACD Settings')
macd_entry = input.float(0.020, title = 'MACD Entry', group = 'MACD Settings')
[macdLine, signalLine, histLine] = ta.macd(macd_price, macd_fast, macd_slow, macd_signal)


//
//SWING HIGH & LOW
//
swing_length = input.int(3, title = 'Swing Length', group = 'Swing High/Low Settings')

swing_high = ta.pivothigh(swing_length, swing_length)
swing_low = ta.pivotlow(swing_length, swing_length)

var last_sh = 0.00
var last_sl = 0.00
last_sh := nz(swing_high, last_sh[1])
last_sl := nz(swing_low, last_sl[1])

plotshape(swing_high, title = 'Swing Highs', style = shape.xcross, location = location.abovebar, color = color.white, offset = -swing_length)
plotshape(swing_low, title = 'Swing Lows', style = shape.xcross, location = location.belowbar, color = color.white, offset = -swing_length)


//
//STRATEGY
//
strategy_start = input.time(timestamp("01 January 2020 00:00:00 UTC-5"), "Strategy Start Date", group = "Strategy Settings", inline = '2')
use_trading_hours = input.bool(false, title = "Trading Hours", tooltip = "This is ignored if the chart timeframe is greater than or equal to the daily timeframe.", 
     group = "Strategy Settings", inline = '3')
trading_time = input.session("0930-1600", title = " ", tooltip = "This uses Eastern Time Zone or U.S. NY Market Hours.", group = "Strategy Settings", inline = '3')
trading_hours_cond = not use_trading_hours or time("",trading_time, "America/New_York")
long_trades = input.bool(true, title = "Long Trades", tooltip = "Do we want to take long trades?" , group = "Strategy Settings", inline = '4')
short_trades = input.bool(true, title = "Short Trades", tooltip = "Do we want to take short trades?" , group = "Strategy Settings", inline = '5') 

rr_amount = input.float(2.00, title = 'R:R', group = "Strategy Settings", inline = '6', step = 0.25) 

long_cond = close >= ma_value and histLine >= macd_entry
short_cond = close < ma_value and histLine < -macd_entry
barcolor(long_cond ? color.teal :  short_cond ? color.red : color.gray )

long_entry = long_trades and trading_hours_cond and close >= ma_value and ta.crossover(histLine, macd_entry)
short_entry = short_trades and trading_hours_cond and close < ma_value and ta.crossunder(histLine, -macd_entry)

var float stop_price = na
var float target_price = na


past_strategy_start_date = time >= strategy_start ? true : false
if past_strategy_start_date
    //ORDERS
    if long_entry
        strategy.entry("LE", direction = strategy.long)    
    if short_entry
        strategy.entry("SS_E", direction = strategy.short)   
    

    //LONG MANAGEMENT
    if strategy.position_size > 0
        if strategy.position_size[1] <= 0
            stop_price := last_sl
            target_price := math.abs((strategy.position_avg_price - last_sl) * rr_amount) + strategy.position_avg_price 
        else 
            stop_price := stop_price[1]
            target_price := target_price[1]
        
        strategy.exit(id = 'LE', from_entry = 'LE', limit = target_price, stop = stop_price, comment = 'LX')
            
    //SHORT MANAGEMENT
    if strategy.position_size < 0
        if strategy.position_size[1] >= 0
            stop_price := last_sh
            target_price := strategy.position_avg_price  - math.abs((last_sh - strategy.position_avg_price) * rr_amount)
        else 
            stop_price := stop_price[1]
            target_price := target_price[1]
            
        strategy.exit(id = 'SS_E', from_entry = 'SS_E', limit = target_price, stop = stop_price, comment = 'SS_X')
    
    if not trading_hours_cond
        strategy.close_all(comment = 'TX', immediately = true)

entry_plot = plot(strategy.position_size == 0 ? na : strategy.position_avg_price, title = 'Entry', color = color.white, style = plot.style_linebr)
target_plot = plot(strategy.position_size == 0 ? na : target_price, title = 'Target', color = color.teal, style = plot.style_linebr, linewidth = 3)
stop_plot = plot(strategy.position_size == 0 ? na : stop_price, title = 'Stop', color = color.red, style = plot.style_linebr, linewidth = 3)

fill(entry_plot, target_plot, color = color.new(color.teal,70))
fill(entry_plot, stop_plot, color = color.new(color.red,70))

