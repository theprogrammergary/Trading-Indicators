// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=5
indicator("Simple Sentiment", overlay = true)

//DASHBOARD
panelbull_color = input.color(#27a69b, title='Bull Color', inline='1', group='Dashboard Settings')
panelbear_color = input.color(#b63632, title='Bear Color', inline='1', group='Dashboard Settings')
panelneutral_color = input.color(color.gray, title='Neutral Color', inline='1', group='Dashboard Settings')

LabelSize = input.string(defval='Medium', options=['Small', 'Medium', 'Large'], title='Dashboard Size', inline='2', group='Dashboard Settings')
label_size = LabelSize == 'Small' ? size.small : LabelSize == 'Medium' ? size.normal : LabelSize == 'Large' ? size.large : size.small
positioning = position.top_right 
dashboard_color = input.color(color.new(#131722, 0), title='BG Color', inline='2', group='Dashboard Settings')
dashboard_text = input.color(#ffffff, title='Text Color', inline='2', group='Dashboard Settings')
dashboard_bull = color.new(panelbull_color,40)
dashboard_bear = color.new(panelbear_color,40)

use_symbol1 = input.bool(false, ' ', group='Scanner Settings', inline = '1')
symbol1 = input.symbol("BTCUSD", title = 'Symbol 1', group='Scanner Settings', inline = '1')
real_symbol1 = use_symbol1 ? symbol1 : syminfo.tickerid

//MAIN CODE
tf1 = "1"
tf2 = "5"
tf3 = "15"
tf4 = "30"
tf5 = "60"
tf6 = "240"

tf1_bars_back = 100
tf2_bars_back = 12
tf3_bars_back = 4
tf4_bars_back = 2
tf5_bars_back = 1
tf6_bars_back = 1

get_count_function(symbol, tf, bars_back) =>

    bull_count = request.security(symbol, tf , math.sum(close[1] >= open[1] ? 1 : 0,bars_back), lookahead = barmerge.lookahead_off)
    bear_count = bars_back - bull_count
    
    what_color = bull_count > bear_count ? panelbull_color : bear_count > bull_count ? panelbear_color : panelneutral_color

    [bull_count, bear_count, what_color]
    
[sym1_tf1_bull, sym1_tf1_bear, color_sym1_tf1] = get_count_function(real_symbol1, tf1, tf1_bars_back)
[sym1_tf2_bull, sym1_tf2_bear, color_sym1_tf2] = get_count_function(real_symbol1, tf2, tf2_bars_back)
[sym1_tf3_bull, sym1_tf3_bear, color_sym1_tf3] = get_count_function(real_symbol1, tf3, tf3_bars_back)
[sym1_tf4_bull, sym1_tf4_bear, color_sym1_tf4] = get_count_function(real_symbol1, tf4, tf4_bars_back)
[sym1_tf5_bull, sym1_tf5_bear, color_sym1_tf5] = get_count_function(real_symbol1, tf5, tf5_bars_back)
[sym1_tf6_bull, sym1_tf6_bear, color_sym1_tf6] = get_count_function(real_symbol1, tf6, tf6_bars_back)

all_green = color_sym1_tf1 == panelbull_color and
     color_sym1_tf2 == panelbull_color and
     color_sym1_tf3 == panelbull_color and
     color_sym1_tf4 == panelbull_color and
     color_sym1_tf5 == panelbull_color and
     color_sym1_tf6 == panelbull_color

all_red = color_sym1_tf1 == panelbear_color and
     color_sym1_tf2 == panelbear_color and
     color_sym1_tf3 == panelbear_color and
     color_sym1_tf4 == panelbear_color and
     color_sym1_tf5 == panelbear_color and
     color_sym1_tf6 == panelbear_color
     
//SIGNAL INPUTS
useTradingHours = input.bool(false, title = " ", group = "Trade Settings", inline = '1')
trading_time = input.session("0930-1600", title = "Trading Time", tooltip = "This uses Eastern Time Zone or U.S. NY Market Hours.", group = "Trade Settings", inline = '1')
trading_hours_cond = not useTradingHours or time("",trading_time, "America/New_York")
long_trades = input.bool(true, title = "Long Trades", tooltip = "Do we want to take long trades?" , group = "Trade Settings", inline = '2')
short_trades = input.bool(true, title = "Short Trades", tooltip = "Do we want to take short trades?" , group = "Trade Settings", inline = '3')

//ENTRY / EXIT SIGNALS
var in_trade = false
var trade_side = 0

long_entry = long_trades and trading_hours_cond and (all_green and not all_green[1]) and trade_side[1] != 1
short_entry = short_trades and trading_hours_cond and (all_red and not all_red[1])  and trade_side[1] != -1

//TARGETS AND STOPS
use_profit_target = input.bool(true, title = " ", group = "Trade Settings", inline = '5')
pt_amount = input.float(2.00, minval = 0.00, maxval = 99.0, step = 0.25, title = "Profit Target %",  tooltip = "Profit Target %. Based off asset price from entry." , group = "Trade Settings", inline = '5')
use__stop = input.bool(true, title = " ", group = "Trade Settings", inline = '6')
stop_amount = input.float(1.50, minval = 0.00, maxval = 99.0, step = 0.25, title = "Stop %" ,  tooltip = "Stop %. Based off asset price from entry.", group = "Trade Settings", inline = '6')

var target = 99999999.99
var stop = 0.000000
var entry_price = 0.00

entry_price := long_entry[1] or short_entry[1] ? open :  in_trade == true ? entry_price[1] : na
trade_side := long_entry[1] ? 1 : short_entry[1] ? -1 : in_trade == false ? 0 : trade_side[1]

if use_profit_target
    target := trade_side == 1 ? entry_price + (entry_price * (pt_amount/100)) : trade_side == -1 ? entry_price - (entry_price * (pt_amount/100)) : na
if use__stop    
    stop := trade_side == 1 ? entry_price - (entry_price * (stop_amount/100)) : trade_side == -1 ? entry_price + (entry_price * (stop_amount/100)) : na

tgt_hit = trade_side == 1 and high >= target or trade_side == -1 and low <= target
stop_hit = trade_side == 1 and low <= stop or trade_side == -1 and high >= stop

long_exit = ((not short_trades and (all_red[1] or not trading_hours_cond)) or (tgt_hit or stop_hit)) and in_trade[1] == true and trade_side[1] == 1
short_exit = ((not long_trades and (all_green[1] or not trading_hours_cond)) or (tgt_hit or stop_hit)) and in_trade[1] == true and trade_side[1] == -1

in_trade := long_entry[1] or short_entry[1] ? true : long_exit or short_exit ?  false : in_trade[1]
    
//PLOTS
show_signals = input.bool(true, title = 'Show Signals', inline='1', group='Visual Settings')
// label_offset = input.int(25, minval = 1, title=' | Offset', inline='1', group='Visual Settings')

plotshape(show_signals and long_entry[1] , style = shape.triangleup, location = location.belowbar, color=color.new(panelbull_color, 30), size=size.small, title = 'Long Entry')
plotshape(show_signals and short_entry[1] , style = shape.triangledown, location = location.abovebar, color=color.new(panelbear_color, 30), size=size.small, title = 'SS Entry')

plotshape(show_signals and short_exit, style = shape.triangleup, location = location.belowbar, color=color.new(dashboard_text, 30), size=size.small, title = 'SS Exit')
plotshape(show_signals and long_exit, style = shape.triangledown, location = location.abovebar, color=color.new(dashboard_text, 30), size=size.small, title = 'Long Exit')

show_lines = input.bool(true, title = 'Show Lines', inline='1', group='Visual Settings')
entry_color = input.color(color.blue, title = 'Entry Color', group = 'Visual Settings', inline = '3')
tgt_color = input.color(#27a69b, title = 'Tgt Color', group = 'Visual Settings', inline = '3')
stop_color = input.color(#b63632, title = 'Stop Color', group = 'Visual Settings', inline = '3')

plot(show_lines ? entry_price : na, title = 'Entry Line', color = entry_color, style = plot.style_circles, editable = false)
plot(show_lines ? target : na, title = 'Target Line', color = tgt_color, style = plot.style_circles, editable = false)
plot(show_lines ? stop : na, title = 'Stop Line', color = stop_color, style = plot.style_circles, editable = false)

//BG Color
var last_signal_no_stop_tgt = 0
last_signal_no_stop_tgt := all_green and not all_green[1] ? 1 : all_red and not all_red[1] ? -1 : last_signal_no_stop_tgt[1]

var last_signal_stop_tgt = 0
last_signal_stop_tgt := trade_side

last_signal = (use_profit_target or use__stop) ? last_signal_stop_tgt : last_signal_no_stop_tgt

color_bg = input.bool(true, title = 'Color BG', inline='1', group='Visual Settings')
bgcolor(not color_bg ? na : last_signal == 1 ? color.new(panelbull_color,80) : last_signal == -1 ? color.new(panelbear_color,80) : na)


//ALERTS
if long_entry
    alert('Long Entry' , alert.freq_once_per_bar_close)
if short_entry
    alert('Short Entry' , alert.freq_once_per_bar_close)
    
if long_exit
    alert('Long Exit', alert.freq_once_per_bar)
if short_exit
    alert('Short Exit', alert.freq_once_per_bar)
    
alertcondition(all_green and not all_green[1] , title='All Timeframes Green', message='All Timeframes Green')
alertcondition(all_red and not all_red[1] , title='All Timeframes Red', message='All Timeframes Red')





//TABLE
var table t = table.new(positioning, 7, 3, frame_color=color.new(dashboard_color, 100), frame_width=1, border_color=color.new(dashboard_color, 100), border_width=1)
if barstate.islast

    //Column 1
    table.cell(t, 0, 0, text='Simple Sentiment', width=0, bgcolor=dashboard_color, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    table.cell(t, 0, 1, text=' ', width=0, bgcolor=dashboard_color, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    table.cell(t, 0, 2, text=str.substring(real_symbol1, str.pos(real_symbol1, ":") + 1), width=0, bgcolor=dashboard_color, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    
    table.cell(t, 1, 1, text= tf1, width=2, bgcolor=dashboard_color, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    table.cell(t, 2, 1, text= tf2, width=2, bgcolor=dashboard_color, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    table.cell(t, 3, 1, text= tf3, width=2, bgcolor=dashboard_color, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    table.cell(t, 4, 1, text= tf4, width=2, bgcolor=dashboard_color, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)       
    table.cell(t, 5, 1, text= tf5, width=2, bgcolor=dashboard_color, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    table.cell(t, 6, 1, text= tf6, width=2, bgcolor=dashboard_color, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)  
    
    table.cell(t, 1, 2, text= "   ", width=2, bgcolor=color_sym1_tf1, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    table.cell(t, 2, 2, text= "   ", width=2, bgcolor=color_sym1_tf2, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)   
    table.cell(t, 3, 2, text= "   ", width=2, bgcolor=color_sym1_tf3, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)    
    table.cell(t, 4, 2, text= "   ", width=2, bgcolor=color_sym1_tf4, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)    
    table.cell(t, 5, 2, text= "   ", width=2, bgcolor=color_sym1_tf5, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    table.cell(t, 6, 2, text= "   ", width=2, bgcolor=color_sym1_tf6, text_color=dashboard_text, text_size=label_size, text_halign=text.align_center)
    
    table.merge_cells(t, 0, 0, 6, 0)


