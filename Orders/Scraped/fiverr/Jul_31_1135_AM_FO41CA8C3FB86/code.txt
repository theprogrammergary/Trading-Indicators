


input higher_timeframe = AggregationPeriod.THIRTY_MIN;
input middle_timeframe = AggregationPeriod.FIFTEEN_MIN;


input cci = 20;
input atr = 20;
def mult = 1;

def price = close;
def linDev = LinDev(price, cci);
def thiscci = if linDev == 0 then 0 else (price - Average(price, cci)) / linDev / 0.015;





# calc x
def atr_value = MovingAverage(averageType.WILDERS, TrueRange(high, close, low), atr);
def x;
def tgthigh = if x[1] > 0 then x[1] else close[1] + mult * atr_value;
def tgtlow  = if x[1] > 0 then x[1] else close[1] - mult * atr_value;


if (Min(low, Min(low[1], low[2])) >= x[1] and ((close >= tgthigh) or (low > (x[1])))) {
    x = Min(low, Min(low[1], low[2]));
}
else if (Max(high, Max(high[1], high[2])) <= (x[1]) and ((close <= tgtlow) or (high < (x[1])))) {
    x = Max(high, Max(high[1], high[2]));
}
else {
    x = x[1];
}

def temp_x = x;
def tempswap = if (temp_x > temp_x[1] and thiscci >= 0) then 1 else if (temp_x < temp_x[1] and thiscci <= 0) then -1 else tempswap[1];

#def hswap=tempswap==1?color.teal:color.red;
#def mswap=tempswap==1?color.blue:color.orange;




#calc higher timeframe
def htf_close = close(period = higher_timeframe);
def htf_high = high(period = higher_timeframe);
def htf_low = low(period = higher_timeframe);
def htf_atr = MovingAverage(averageType.WILDERS, TrueRange(htf_high, htf_close, htf_low), atr);

def htf_linDev = LinDev(htf_close, cci);
def htf_thiscci = if htf_linDev == 0 then 0 else (htf_close - Average(htf_close, cci)) / htf_linDev / 0.015;

def htf_x;
def tgthtf_high = if htf_x[1] > 0 then htf_x[1] else htf_close[1] + mult * htf_atr;
def tgthtf_low  = if htf_x[1] > 0 then htf_x[1] else htf_close[1] - mult * htf_atr;


if (Min(htf_low, Min(htf_low[1], htf_low[2])) >= htf_x[1] and ((htf_close >= tgthtf_high) or (htf_low > (htf_x[1])))) {
    htf_x = Min(htf_low, Min(htf_low[1], htf_low[2]));
}
else if (Max(htf_high, Max(htf_high[1], htf_high[2])) <= (htf_x[1]) and ((htf_close <= tgthtf_low) or (htf_high < (htf_x[1])))) {
    htf_x = Max(htf_high, Max(htf_high[1], htf_high[2]));
}
else {
    htf_x = htf_x[1];
}
def htf_tempswap = if (htf_x > htf_x[1] and htf_thiscci >= 0) then 1 else if (htf_x < htf_x[1] and htf_thiscci <= 0) then -1 else htf_tempswap[1];



#calc middle timeframe
def mtf_close = close(period = middle_timeframe);
def mtf_high = high(period = middle_timeframe);
def mtf_low = low(period = middle_timeframe);
def mtf_atr = MovingAverage(averageType.WILDERS, TrueRange(mtf_high, mtf_close, mtf_low), atr);

def mtf_linDev = LinDev(mtf_close, cci);
def mtf_thiscci = if mtf_linDev == 0 then 0 else (mtf_close - Average(mtf_close, cci)) / mtf_linDev / 0.015;

def mtf_x;
def tgtmtf_high = if mtf_x[1] > 0 then mtf_x[1] else mtf_close[1] + mult * mtf_atr;
def tgtmtf_low  = if mtf_x[1] > 0 then mtf_x[1] else mtf_close[1] - mult * mtf_atr;


if (Min(mtf_low, Min(mtf_low[1], mtf_low[2])) >= mtf_x[1] and ((mtf_close >= tgtmtf_high) or (mtf_low > (mtf_x[1])))) {
    mtf_x = Min(mtf_low, Min(mtf_low[1], mtf_low[2]));
}
else if (Max(mtf_high, Max(mtf_high[1], mtf_high[2])) <= (mtf_x[1]) and ((mtf_close <= tgtmtf_low) or (mtf_high < (mtf_x[1])))) {
    mtf_x = Max(mtf_high, Max(mtf_high[1], mtf_high[2]));
}
else {
    mtf_x = mtf_x[1];
}
def mtf_tempswap = if (mtf_x > mtf_x[1] and mtf_thiscci >= 0) then 1 else if (mtf_x < mtf_x[1] and mtf_thiscci <= 0) then -1 else mtf_tempswap[1];





plot htfx =  if isnan(close) then double.nan else htf_x;
htfx.assignvalueColor(if htf_tempswap == 1 then color.green else color.red);

plot htf_bull_change = if htf_tempswap == 1 and htf_tempswap[1] != 1 then low else double.nan;
htf_bull_change.setpaintingStrategy(paintingStrategy.POINTS);
htf_bull_change.setdefaultcolor(color.green);
htf_bull_change.setlineWeight(5);

plot htf_bear_change = if htf_tempswap == -1 and htf_tempswap[1] != -1 then high else double.nan;
htf_bear_change.setpaintingStrategy(paintingStrategy.POINTS);
htf_bear_change.setdefaultcolor(color.red);
htf_bear_change.setlineWeight(5);



plot mtfx = mtf_x;
mtfx.assignvaluecolor(if mtf_tempswap == 1 then createcolor(102,175,255) else color.dark_orange);

plot mtf_bull_change = if mtf_tempswap == 1 and mtf_tempswap[1] != 1 then low else double.nan;
mtf_bull_change.setpaintingStrategy(paintingStrategy.TRIANGLES);
mtf_bull_change.setdefaultcolor(createcolor(102,175,255));
mtf_bull_change.setlineWeight(5);

plot mtf_bear_change = if mtf_tempswap == -1 and mtf_tempswap[1] != -1 then high else double.nan;
mtf_bear_change.setpaintingStrategy(paintingStrategy.TRIANGLES);
mtf_bear_change.setdefaultcolor(color.dark_orange);
mtf_bear_change.setlineWeight(5);



plot tempx = if isnan(close) then double.nan else temp_x;
tempx.assignvalueColor(if tempswap == 1 then color.green else color.red);
addchartbubble(tempswap == 1 and tempswap[1] != 1, low, "BUY", color.green, no);
addchartbubble(tempswap == -1 and tempswap[1] != -1, high, "SELL", color.red, yes);



alert(htf_tempswap == 1 and htf_tempswap[1] != 1, "HTF BUY ALERT", alert.bar, sound.ding);
alert(htf_tempswap == -1 and htf_tempswap[1] != -1, "HTF SELL ALERT", alert.bar, sound.ding);

alert(mtf_tempswap == 1 and mtf_tempswap[1] != 1, "MTF BUY ALERT", alert.bar, sound.ding);
alert(mtf_tempswap == -1 and mtf_tempswap[1] != -1, "MTF SELL ALERT", alert.bar, sound.ding);

alert(tempswap == 1 and tempswap[1] != 1, "BUY ALERT", alert.bar, sound.ding);
alert(tempswap == -1 and tempswap[1] != -1, "SELL ALERT", alert.bar, sound.ding);


addlabel(yes, "CHART " + if tempswap == 1 then "BULL" else "BEAR", if tempswap == 1 then color.green else color.red);
addlabel(yes, "MTF " + if mtf_tempswap == 1 then "BULL" else "BEAR", if mtf_tempswap == 1 then color.green else color.red);
addlabel(yes, "HTF " + if htf_tempswap == 1 then "BULL" else "BEAR", if htf_tempswap == 1 then color.green else color.red);

