// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© atraderstoolbox

//@version=5
indicator("for_tomaszpanke990", overlay = true)


// ma settings
ma_type     = input.string("EMA", title = 'MA', options = ['EMA', 'SMA', 'HMA', 'WMA'], group = 'MA Settings', inline = 'MA')
ma_length   = input.int(13, title = '', group = 'MA Settings', inline = 'MA')
ma_tf       = input.timeframe('3', title = '', group = 'MA Settings', inline = 'MA')

ma_above_pct= input.float(0.25, title = 'MA Above %', group = 'MA Settings', inline = 'pct', step = 0.25)
ma_below_pct= input.float(-0.25, title = 'MA Below %', group = 'MA Settings', inline = 'pct', step = 0.25)


// supertrend settings
st_length   = input.int(10, title = 'Length', group = 'Supertrend Settings', inline = 'ST')
st_fact     = input.float(3.00, title = 'Fact', step = 0.25, group = 'Supertrend Settings', inline = 'ST')
st_tf       = input.timeframe('3', title = '', group = 'Supertrend Settings', inline = 'ST')

st_above_pct= input.float(0.25, title = 'ST Above %', group = 'Supertrend Settings', inline = 'pct', step = 0.25)
st_below_pct= input.float(-0.25, title = 'ST Below %', group = 'Supertrend Settings', inline = 'pct', step = 0.25)



// calculate ma value
f_ma(i_maSource, i_maType, i_maLength) =>
    float ma = switch i_maType
        "EMA" => ta.ema(i_maSource, i_maLength)
        "SMA" => ta.sma(i_maSource, i_maLength)
        "HMA" => ta.hma(i_maSource, i_maLength)
        "WMA" => ta.wma(i_maSource, i_maLength)
        => ta.ema(i_maSource, i_maLength)


f_calculate_ma(ma_type, ma_length, ma_tf) =>
    higherSrc   = timeframe.in_seconds() == timeframe.in_seconds(ma_tf) ? close : close[1]
    ma_higherTF = request.security(syminfo.tickerid, ma_tf, f_ma(close, ma_type, ma_length), lookahead = barmerge.lookahead_off)
    ma_lowerTF  = request.security_lower_tf(syminfo.tickerid, ma_tf, f_ma(close, ma_type, ma_length), ignore_invalid_timeframe = true)

    useLowerTF   = timeframe.in_seconds() > timeframe.in_seconds(ma_tf)
    ma_value     = useLowerTF ? (array.size(ma_lowerTF) > 0 ? array.last(ma_lowerTF) : na) : ma_higherTF


ma_value        = f_calculate_ma(ma_type, ma_length, ma_tf)
ma_distance     = (close-ma_value)/ma_value * 100
ma_aboveSignal  = ma_distance > ma_above_pct
ma_belowSignal  = ma_distance < ma_below_pct
plotshape(true ? ma_value : na, title = 'EMA Signal', style = shape.circle, location = location.absolute,
  color = ma_aboveSignal ? color.rgb(0, 207, 7) : ma_belowSignal ? color.rgb(255, 0, 0) : color.rgb(120, 123, 134, 100))
plot(ma_value, color = color.new(color.yellow, 50), style = plot.style_stepline, title = 'EMA')



// calculate supertrend value
f_calculate_st(st_fact, st_length, st_tf) =>
    [st_higherTF, stDirection_higherTF] = request.security(syminfo.tickerid, ma_tf, ta.supertrend(st_fact, st_length), lookahead = barmerge.lookahead_off)
    [st_lowerTF, stDirection_lowerTF]  = request.security_lower_tf(syminfo.tickerid, ma_tf, ta.supertrend(st_fact, st_length), ignore_invalid_timeframe = true)

    useLowerTF   = timeframe.in_seconds() > timeframe.in_seconds(ma_tf)
    st_direction = useLowerTF ? (array.size(stDirection_lowerTF) > 0 ? array.last(stDirection_lowerTF) : na) : stDirection_higherTF
    st_value     = useLowerTF ? (array.size(st_lowerTF) > 0 ? array.last(st_lowerTF) : na) : st_higherTF

    [st_direction, st_value]


[st_direction, st_value] = f_calculate_st(st_fact, st_length, st_tf)

st_distance     = (close-st_value)/ma_value * 100
st_aboveSignal  = st_distance > st_above_pct
st_belowSignal  = st_distance < st_below_pct
plotshape(true ? st_value : na, title = 'ST Signal', style = shape.square, location = location.absolute,
  color = st_aboveSignal ? color.rgb(0, 207, 7) : st_belowSignal ? color.rgb(255, 0, 0) : color.rgb(120, 123, 134, 100))


p_stBull = plot(st_direction < 0 ? st_value : na, color = color.rgb(76, 175, 79, 79), style = plot.style_linebr, title = 'Supertrend Bull')
p_stBear = plot(st_direction >= 0 ? st_value : na, color = color.rgb(255, 82, 82, 77), style = plot.style_linebr, title = 'Supertrend Bear')
p_stFill = plot(ohlc4, color = color.new(color.black, 100), title = 'Supertrend Fill Level')
fill(p_stBull, p_stFill, color = color.new(color.green, 85))
fill(p_stBear, p_stFill, color = color.new(color.red, 85))

// useLowerTF   = timeframe.in_seconds() > timeframe.in_seconds(ma_tf)
// bgcolor(useLowerTF ? color.black : na)



// alerts
alertcondition(ma_aboveSignal, "MA Above Signal")
alertcondition(ma_belowSignal, "MA Below Signal")

alertcondition(st_aboveSignal, "Supertrend Above Signal")
alertcondition(st_belowSignal, "Supertrend Below Signal")