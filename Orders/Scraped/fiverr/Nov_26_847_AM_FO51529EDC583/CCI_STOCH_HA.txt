// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© atraderstoolbox

//@version=5
indicator("CCI + Stoch + HA", overlay = false)

ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

// CCI
cci_timeframe = input.timeframe('', title = 'Timeframe to Use', group = 'CCI Settings')
cci_length = input.int(20, minval=1, title = 'CCI Length', group = 'CCI Settings')
cci_source = input.source(hlc3, title = 'CCI Source', group = 'CCI Settings')
cci_long = input.int(60, title = 'CCI Long Cross Above', group = 'CCI Settings')
cci_short = input.int(-60, title = 'CCI Short Cross Below', group = 'CCI Settings')
bars_for_cross = input.int(10, title = 'Max Bars For Cross', group = 'CCI Settings')

cci  = request.security(syminfo.tickerid, cci_timeframe, ta.cci(cci_source, cci_length)[1], lookahead = barmerge.lookahead_on)

plot(cci, "CCI", color=color.yellow)
plot(cci_long, 'CCI Long', color = color.new(color.white,70))
plot(cci_short, 'CCI Short', color = color.new(color.white,70))

cci_long_cross = bar_index - ta.valuewhen(ta.crossover(cci, cci_long), bar_index, 0)
cci_short_cross = bar_index - ta.valuewhen(ta.crossunder(cci, cci_short), bar_index, 0)

// Stoch
stoch_timeframe = input.timeframe('', title = 'Timeframe to Use', group = 'Stoch Settings')
periodK = input.int(14, title="%K Length", minval=1, group = 'Stoch Settings')
smoothK = input.int(1, title="%K Smoothing", minval=1, group = 'Stoch Settings')
periodD = input.int(3, title="%D Smoothing", minval=1, group = 'Stoch Settings')

k = request.security(syminfo.tickerid, stoch_timeframe, ta.sma(ta.stoch(close, high, low, periodK), smoothK), lookahead = barmerge.lookahead_on)
d = request.security(syminfo.tickerid, stoch_timeframe, ta.sma(k, periodD), lookahead = barmerge.lookahead_on)

plot(k, title="%K", color=#2962FF)
plot(d, title="%D", color=#FF6D00)


// CHART Heikin-ashi
len=input.int(10, title = "Length 1", group = 'Chart HA Settings')
o=ta.ema(open,len)
c=ta.ema(close,len)
h=ta.ema(high,len)
l=ta.ema(low,len)

var float haopen = 0.00
haclose = (o+h+l+c)/4
haopen := na(haopen[1]) ? (o + c)/2 : (haopen[1] + haclose[1]) / 2
hahigh = math.max(h, math.max(haopen,haclose))
halow = math.min(l, math.min(haopen,haclose))

len2=input(10,  title = "Length 2", group = 'Chart HA Settings')
o2=ta.ema(haopen, len2)
c2=ta.ema(haclose, len2)
h2=ta.ema(hahigh, len2)
l2=ta.ema(halow, len2)

col= o2>c2 ? color.red : color.green
chartha_bull = c2 >= o2
chartha_bear = c2 < o2

plot(0, title = 'HA Trend', color = col, style = plot.style_circles, linewidth = 2)
// CHART Heikin-ashi

// --STRATEGY INPUTS-- //
// strategy_start = input.time(timestamp("01 January 2020 00:00:00 UTC-5"), "Strategy Start Date", group = "StrategySettings", inline = '1')
// use_trading_hours = input.bool(false, title = "Use Trading Hours", tooltip = "This is ignored if the chart timeframe is greater than or equal to the daily timeframe.", group = "StrategySettings", inline = '2')
// trading_time = input.session("0930-1600", title = " ", tooltip = "This uses Eastern Time Zone or U.S. NY Market Hours.", group = "StrategySettings", inline = '2')
// trading_hours_cond = not use_trading_hours or time("",trading_time, "America/New_York")

// long_trades = input.bool(true, title = "Long Trades", tooltip = "Do we want to take long trades?" , group = "StrategySettings", inline = '3')
// short_trades = input.bool(true, title = "Short Trades", tooltip = "Do we want to take short trades?" , group = "StrategySettings", inline = '4')

// long_entry = long_trades and trading_hours_cond and chartha_bull and k > d and cci_long_cross <= bars_for_cross
// long_exit = long_trades and chartha_bull[1] and not chartha_bull

// short_entry = short_trades and trading_hours_cond and chartha_bear and k < d and cci_short_cross <= bars_for_cross
// short_exit = short_trades and chartha_bear[1] and not chartha_bear

// past_strategy_start_date = time >= strategy_start ? true : false
// // --STRATEGY INPUTS-- //


// // --ORDERS-- //
// if past_strategy_start_date
//     if long_exit
//         strategy.close("LE", comment = 'LX')

//     if short_exit
//         strategy.close("SS_E", comment = 'SS_X')

//     if long_entry
//         strategy.entry("LE", strategy.long)

//     if short_entry
//         strategy.entry("SS_E", strategy.short)
// // --ORDERS-- //
