// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © atraderstoolbox

//@version=5
strategy("for_Ycginvb", overlay=false, margin_long=100, margin_short=100)




// Getting inputs
fast_length = input(title="Fast Length", defval=13)
slow_length = input(title="Slow Length", defval=21)
src = input(title="Source", defval=close)
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 3)
sma_source = input.string(title="Oscillator MA Type",  defval="VWMA", options=["SMA", "EMA", "VWMA"])
sma_signal = input.string(title="Signal Line MA Type", defval="VWMA", options=["SMA", "EMA", "VWMA"])
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", group="Color Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", group="Color Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below")
// Calculating

fastMA = ta.ema(volume*close, fast_length)/ta.ema(volume, fast_length)
slowMA = ta.ema(volume*close, slow_length)/ta.ema(volume, slow_length)
vwmacd = fastMA - slowMA
signal = ta.ema(vwmacd, signal_length)
hist = vwmacd - signal
hline(0, "Zero Line", color=color.new(#787B86, 50))
plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
plot(vwmacd, title="MACD", color=col_macd, display = display.none)
plot(signal, title="Signal", color=col_signal, display = display.none)

strategy_length = input.int(title="Histogram Average",  minval = 1, maxval = 50, defval = 10)
hist_avg = ta.sma(hist, strategy_length)

plot(hist_avg, title = 'Histogram Average')



///////////////////////
/////CREATE SIGNALS////
///////////////////////
strategy_start = input.time(timestamp("01 January 2020 00:00:00 UTC-5"), "Strategy Start Date", group = "Strategy Settings", inline = '1')
use_trading_hours = input.bool(false, title = "Use Trading Hours", tooltip = "This is ignored if the chart timeframe is greater than or equal to the daily timeframe.", group = "Strategy Settings", inline = '2')
trading_time = input.session("0930-1600", title = " ", tooltip = "This uses Eastern Time Zone or U.S. NY Market Hours.", group = "Strategy Settings", inline = '2')
trading_hours_cond = not use_trading_hours or time("",trading_time, "America/New_York")

long_trades = input.bool(true, title = "Long Trades", tooltip = "Do we want to take long trades?" , group = "Strategy Settings", inline = '3')
short_trades = input.bool(true, title = "Short Trades", tooltip = "Do we want to take short trades?" , group = "Strategy Settings", inline = '4')

long_entry = long_trades and trading_hours_cond and ta.crossover(hist, hist_avg)
long_exit = not short_trades and ta.crossunder(hist, hist_avg)

short_entry = short_trades and trading_hours_cond and ta.crossunder(hist, hist_avg)
short_exit = not long_trades and ta.crossover(hist, hist_avg)

past_strategy_start_date = time >= strategy_start ? true : false


//ORDERS
if past_strategy_start_date

    //ENTRIES
    if long_entry
        strategy.entry("LE", direction = strategy.long)   
    else if short_entry
        strategy.entry("SS_E", direction = strategy.short)   
    
    //EXITS
    if long_exit
        strategy.close("LE", comment = "LX")
    else if short_exit
        strategy.close("SS_E", comment = "SS_X")
        
    if not trading_hours_cond
        strategy.close_all(comment = "TX", immediately = true)
    

