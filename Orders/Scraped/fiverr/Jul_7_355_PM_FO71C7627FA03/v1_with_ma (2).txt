// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © atraderstoolbox

//@version=5
indicator("for_tennesseejoseph_v1", overlay = true)

// general settings
focus_mode      = input.bool(false, title = 'Focus Mode   ', group = 'Settings', inline = '1', 
 tooltip = 'Only show the most recent levels. A Value of 250 will only show structure that started 250 bars ago or less.')
focus_mode_len  = input.int(250, title = ' ', group = 'Settings', inline = '1', minval = 10, maxval = 5000)
history_of_demand_to_keep = 20
 
bull_color      = input.color(color.green, title = 'Bull Color', group = 'Settings', inline = '2')
bear_color      = input.color(color.red, title = 'Bear Color', group = 'Settings', inline = '2')



// ma settings
// 1. 55 EMA - Yellow Colour
// 2.89 EMA- Black Colour
// 3.144 EMA - White Colour
// 4.233 EMA- Black Colour (Thick)
// 5. 377 EMA - Red Colour (Thick)

use_ma1     = input.bool(true, title = 'MA 1', group = 'MA Settings', inline = '1')
type_ma1    = input.string('EMA', title = '',
 options = ['SMA', 'EMA', 'HMA', 'WMA', 'RMA'] , group = 'MA Settings', inline = '1')
length_ma1  = input.int(55, title = '', group = 'MA Settings', inline = '1')

use_ma2     = input.bool(true, title = 'MA 2', group = 'MA Settings', inline = '2')
type_ma2    = input.string('EMA', title = '',
 options = ['SMA', 'EMA', 'HMA', 'WMA', 'RMA'] , group = 'MA Settings', inline = '2')
length_ma2  = input.int(89, title = '', group = 'MA Settings', inline = '2')

use_ma3     = input.bool(true, title = 'MA 3', group = 'MA Settings', inline = '3')
type_ma3    = input.string('EMA', title = '',
 options = ['SMA', 'EMA', 'HMA', 'WMA', 'RMA'] , group = 'MA Settings', inline = '3')
length_ma3  = input.int(144, title = '', group = 'MA Settings', inline = '3')

use_ma4     = input.bool(true, title = 'MA 4', group = 'MA Settings', inline = '4')
type_ma4    = input.string('EMA', title = '',
 options = ['SMA', 'EMA', 'HMA', 'WMA', 'RMA'] , group = 'MA Settings', inline = '4')
length_ma4  = input.int(233, title = '', group = 'MA Settings', inline = '4')

use_ma5     = input.bool(true, title = 'MA 5', group = 'MA Settings', inline = '5')
type_ma5    = input.string('EMA', title = '',
 options = ['SMA', 'EMA', 'HMA', 'WMA', 'RMA'] , group = 'MA Settings', inline = '5')
length_ma5  = input.int(377, title = '', group = 'MA Settings', inline = '5')


// ma filter settings
filter_type = input.string('On Draw', title = 'Filter Type', 
 options = ['On Draw', 'On Signal'], group = 'MA Filter Settings', inline = 'a')
allow_3     = input.bool(true, title = 'Use Counts More Than 3', group = 'MA Filter Settings', inline = '0')

use_filter1 = input.bool(true, title = '', group = 'MA Filter Settings', inline = '1')
filter_1a    = input.string('MA 1', title = '',
 options = ['MA 1', 'MA 2', 'MA 3', 'MA 4', 'MA 5'], group = 'MA Filter Settings', inline = '1')
filter_1b    = input.string('MA 2', title = 'is Above for Longs / Below for Shorts',
 options = ['MA 1', 'MA 2', 'MA 3', 'MA 4', 'MA 5'], group = 'MA Filter Settings', inline = '1')

use_filter2 = input.bool(true, title = '', group = 'MA Filter Settings', inline = '2')
filter_2a    = input.string('MA 1', title = '',
 options = ['MA 1', 'MA 2', 'MA 3', 'MA 4', 'MA 5'], group = 'MA Filter Settings', inline = '2')
filter_2b    = input.string('MA 5', title = 'is Above for Longs / Below for Shorts',
 options = ['MA 1', 'MA 2', 'MA 3', 'MA 4', 'MA 5'], group = 'MA Filter Settings', inline = '2')

use_filter3 = input.bool(false, title = '', group = 'MA Filter Settings', inline = '3')
filter_3a    = input.string('MA 1', title = '',
 options = ['MA 1', 'MA 2', 'MA 3', 'MA 4', 'MA 5'], group = 'MA Filter Settings', inline = '3')
filter_3b    = input.string('MA 4', title = 'is Above for Longs / Below for Shorts',
 options = ['MA 1', 'MA 2', 'MA 3', 'MA 4', 'MA 5'], group = 'MA Filter Settings', inline = '3')


use_filter4 = input.bool(false, title = '', group = 'MA Filter Settings', inline = '4')
filter_4a    = input.string('MA 1', title = '',
 options = ['MA 1', 'MA 2', 'MA 3', 'MA 4', 'MA 5'], group = 'MA Filter Settings', inline = '4')
filter_4b    = input.string('MA 5', title = 'is Above for Longs / Below for Shorts',
 options = ['MA 1', 'MA 2', 'MA 3', 'MA 4', 'MA 5'], group = 'MA Filter Settings', inline = '4')


// define vars
var int green_count         = 0
var int red_count           = 0

var bool green_candle       = false
var bool red_candle         = false

var bool new_buy_candle     = false
var bool new_sell_candle    = false

var current_buy_lines       = array.new_line(history_of_demand_to_keep, na)
var current_sell_lines      = array.new_line(history_of_demand_to_keep, na)

var broken_buy_lines        = array.new_line(history_of_demand_to_keep, na)
var broken_sell_lines       = array.new_line(history_of_demand_to_keep, na)

var int broken_buy_count    = 0
var int broken_sell_count   = 0

var bool broken_buy_alert   = false
var bool broken_sell_alert  = false

var int x_1                 = 0
var int x_2                 = 0
var float y_1               = 0.00
var float y_2               = 0.00



// define functions
f_ma(ma_type, ma_length) =>
    float ma = switch ma_type
        "EMA" => ta.ema(close, ma_length)
        "SMA" => ta.sma(close, ma_length)
        "RMA" => ta.rma(close, ma_length)
        "WMA" => ta.wma(close, ma_length)
        "hMA" => ta.hma(close, ma_length)
        => ta.sma(close, ma_length)


f_array_add_pop(array, new_value_to_add) =>
    array.unshift(array, new_value_to_add)
    array.pop(array)


f_draw_line(line_array, line_type, x_1, x_2, y_1, y_2) =>
    line.delete( array.get(line_array, array.size(line_array) - 1) )

    f_array_add_pop(line_array, 
         line.new(x1 = x_1, y1 = y_1, x2 = x_2, y2 = y_2,
         xloc = xloc.bar_index, extend = extend.right, color = line_type == 1 ? bull_color : bear_color,
         style = line.style_solid, width = 1
         )
     )


f_extend_line_endpoint(line_array) =>
    for i = 0 to array.size(line_array) - 1
        line.set_x2(array.get(line_array, i), bar_index)


f_manage_lines_and_alerts(line_array, broken_line_array, line_type, o, h, l, c) =>
    broken_line_count   = 0
    array_size          = array.size(line_array)

    if line_type == 1
        for i = 0 to array_size - 1
            level_to_break      = line.get_y2(array.get(line_array, i))
            line_broke          = c > level_to_break
            broken_line_count   += line_broke ? 1 : 0 

            if line_broke
                copied_line = line.copy(array.get(line_array, i))
                f_array_add_pop(broken_line_array, copied_line)
                // line.set_color(array.get(broken_line_array, 0), color.new(bull_color, 50))
                line.set_x2(array.get(broken_line_array, 0), bar_index)
                line.set_extend(array.get(broken_line_array, 0), extend.none)
                line.delete(array.get(line_array, i))
    else if line_type == -1
        for i = 0 to array_size - 1
            level_to_break      = line.get_y2(array.get(line_array, i))
            line_broke          = c < level_to_break
            broken_line_count   += line_broke ? 1 : 0 

            if line_broke
                copied_line = line.copy(array.get(line_array, i))
                f_array_add_pop(broken_line_array, copied_line)
                // line.set_color(array.get(broken_line_array, 0), color.new(bear_color, 50))
                line.set_x2(array.get(broken_line_array, 0), bar_index)
                line.set_extend(array.get(broken_line_array, 0), extend.none)
                line.delete(array.get(line_array, i))


    broken_line_count


f_focusmode_lines(focus_bool, line_array, bar_index_compare) =>
    if focus_bool
        temp_size = array.size(line_array)
        if temp_size > 0
            for i = 0 to temp_size - 1
                if line.get_x1(array.get(line_array, i)) <= bar_index_compare
                    line.delete(array.get(line_array,i))


// calculate mas
ma1_value = f_ma(type_ma1, length_ma1)
ma2_value = f_ma(type_ma2, length_ma2)
ma3_value = f_ma(type_ma3, length_ma3)
ma4_value = f_ma(type_ma4, length_ma4)
ma5_value = f_ma(type_ma5, length_ma5)

plot(ma1_value, color = color.yellow, title = 'MA 1', display = use_ma1 ? display.all : display.none, linewidth = 1)
plot(ma2_value, color = color.black, title = 'MA 2', display = use_ma2 ? display.all : display.none, linewidth = 1)
plot(ma3_value, color = color.white, title = 'MA 3', display = use_ma3 ? display.all : display.none, linewidth = 1)
plot(ma4_value, color = color.black, title = 'MA 4', display = use_ma4 ? display.all : display.none, linewidth = 4)
plot(ma5_value, color = color.red, title = 'MA 5', display = use_ma5 ? display.all : display.none, linewidth = 4)


// calculate ma filters
value_filter_1a = filter_1a == 'MA 1' ? ma1_value
 : filter_1a == 'MA 2' ? ma2_value
 : filter_1a == 'MA 3' ? ma3_value
 : filter_1a == 'MA 4' ? ma4_value
 : filter_1a == 'MA 5' ? ma5_value
 : na
value_filter_1b = filter_1b == 'MA 1' ? ma1_value
 : filter_1b == 'MA 2' ? ma2_value
 : filter_1b == 'MA 3' ? ma3_value
 : filter_1b == 'MA 4' ? ma4_value
 : filter_1b == 'MA 5' ? ma5_value
 : na


value_filter_2a = filter_2a == 'MA 1' ? ma1_value
 : filter_2a == 'MA 2' ? ma2_value
 : filter_2a == 'MA 3' ? ma3_value
 : filter_2a == 'MA 4' ? ma4_value
 : filter_2a == 'MA 5' ? ma5_value
 : na
value_filter_2b = filter_2b == 'MA 1' ? ma1_value
 : filter_2b == 'MA 2' ? ma2_value
 : filter_2b == 'MA 3' ? ma3_value
 : filter_2b == 'MA 4' ? ma4_value
 : filter_2b == 'MA 5' ? ma5_value
 : na


value_filter_3a = filter_3a == 'MA 1' ? ma1_value
 : filter_3a == 'MA 2' ? ma2_value
 : filter_3a == 'MA 3' ? ma3_value
 : filter_3a == 'MA 4' ? ma4_value
 : filter_3a == 'MA 5' ? ma5_value
 : na
value_filter_3b = filter_3b == 'MA 1' ? ma1_value
 : filter_3b == 'MA 2' ? ma2_value
 : filter_3b == 'MA 3' ? ma3_value
 : filter_3b == 'MA 4' ? ma4_value
 : filter_3b == 'MA 5' ? ma5_value
 : na

value_filter_4a = filter_4a == 'MA 1' ? ma1_value
 : filter_4a == 'MA 2' ? ma2_value
 : filter_4a == 'MA 3' ? ma3_value
 : filter_4a == 'MA 4' ? ma4_value
 : filter_4a == 'MA 5' ? ma5_value
 : na
value_filter_4b = filter_4b == 'MA 1' ? ma1_value
 : filter_4b == 'MA 2' ? ma2_value
 : filter_4b == 'MA 3' ? ma3_value
 : filter_4b == 'MA 4' ? ma4_value
 : filter_4b == 'MA 5' ? ma5_value
 : na


ma_filter1_long = value_filter_1a > value_filter_1b or not use_filter1
ma_filter1_short = value_filter_1a < value_filter_1b or not use_filter1

ma_filter2_long = value_filter_2a > value_filter_2b or not use_filter2
ma_filter2_short = value_filter_2a < value_filter_2b or not use_filter2

ma_filter3_long = value_filter_3a > value_filter_3b or not use_filter3
ma_filter3_short = value_filter_3a < value_filter_3b or not use_filter3

ma_filter4_long = value_filter_4a > value_filter_4b or not use_filter4
ma_filter4_short = value_filter_4a < value_filter_4b or not use_filter4

ma_filter_long = ma_filter1_long and ma_filter2_long and ma_filter3_long and ma_filter4_long
ma_filter_short = ma_filter1_short and ma_filter2_short and ma_filter3_short and ma_filter4_short


// calculate base logic
[o,h,l,c]       = request.security(ticker.heikinashi(syminfo.tickerid), "", [open, high, low, close])

green_candle    := c > o
red_candle      := c < o

green_count     := green_candle ? green_count[1] + 1 : 0
red_count       := red_candle ? red_count[1] + 1 : 0

inside_candle   = (math.min(c,o) >= math.min(c[1], o[1]) and math.max(c,o) <= math.max(c[1], o[1]))

bull_count      = (allow_3 and green_count >= 2) or (not allow_3 and green_count == 2)
bear_count      = (allow_3 and red_count >= 2) or (not allow_3 and red_count == 2)

new_buy_candle  := bull_count and inside_candle and barstate.isconfirmed
 and ( (ma_filter_long and filter_type == 'On Draw') or filter_type == 'On Signal')
new_sell_candle := bear_count and inside_candle and barstate.isconfirmed
 and ( (ma_filter_short and filter_type == 'On Draw') or filter_type == 'On Signal')
// bgcolor(new_buy_candle ? color.new(color.green, 80) : new_sell_candle ? color.new(color.red, 80) : na)




// draw new lines
if new_buy_candle
    x_1 := h == math.max(h, h[1]) ? bar_index : bar_index[1]
    x_2 := x_1 + 1
    y_1 := math.max(h, h[1])
    y_2 := y_1

    f_draw_line(current_buy_lines, 1, x_1, x_2, y_1, y_2)

else if new_sell_candle
    x_1 := l == math.min(l, l[1]) ? bar_index : bar_index[1]
    x_2 := x_1 + 1
    y_1 := math.min(l, l[1])
    y_2 := y_1

    f_draw_line(current_sell_lines, -1, x_1, x_2, y_1, y_2)


// manage broken lines (edit drawing, look for alerts)
broken_buy_count    := f_manage_lines_and_alerts(current_buy_lines, broken_buy_lines, 1, o, h, l, c)
broken_sell_count   := f_manage_lines_and_alerts(current_sell_lines, broken_sell_lines, -1, o, h, l, c)


// focus mode
if barstate.islast
    f_focusmode_lines(focus_mode, current_buy_lines, bar_index[focus_mode_len])
    f_focusmode_lines(focus_mode, broken_buy_lines, bar_index[focus_mode_len])
    f_focusmode_lines(focus_mode, current_sell_lines, bar_index[focus_mode_len])
    f_focusmode_lines(focus_mode, broken_sell_lines, bar_index[focus_mode_len])


// create alerts
broken_buy_alert    := barstate.isconfirmed
 and broken_buy_count >= 1
 and ( (ma_filter_long and filter_type == 'On Signal') or filter_type == 'On Draw')
 
broken_sell_alert   := barstate.isconfirmed 
 and broken_sell_count >= 1
 and ( (ma_filter_short and filter_type == 'On Signal') or filter_type == 'On Draw')



plotshape(broken_buy_alert, title = 'Broken Buy Line', style = shape.triangleup, color = color.green, size = size.small, location = location.belowbar)
plotshape(broken_sell_alert, title = 'Broken Sell Line', style = shape.triangledown, color = color.red, size = size.small, location = location.abovebar)

alertcondition(broken_buy_alert, 'Buy Alert', 'Broken Buy Line')
alertcondition(broken_sell_alert, 'Sell Alert', 'Broken Sell Line')