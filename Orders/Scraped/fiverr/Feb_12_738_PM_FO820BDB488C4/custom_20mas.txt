// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© atraderstoolbox

//@version=5
indicator("Trader Tactics MA", overlay = true)

// settings
show_labels = input.bool(true, title = 'Show Labels', group = 'Label Settings')


use_ma1 = input.bool(title='MA 1', defval=true, group='MA 1 Settings', inline = '1')
ma1_type = input.string(title=' ', defval='SMA', options=['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'],  group='MA 1 Settings', inline = '1')
ma1_source = input.source(title=' ', defval=close, group='MA 1 Settings', inline = '1')
ma1_length = input.int(defval=50, title=' ', minval=1,  group='MA 1 Settings', inline = '1')
amount_to_show1 = input.int(50, title = 'Bars Back to Show', group = 'MA 1 Settings', inline = '2')
ma1_color = input.color(color.aqua, title = 'Color', group = 'MA 1 Settings', inline = '2')

use_ma2 = input.bool(title='MA 2', defval=true, group='MA 2 Settings', inline = '2')
ma2_type = input.string(title=' ', defval='SMA', options=['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'],  group='MA 2 Settings', inline = '2')
ma2_source = input.source(title=' ', defval=close, group='MA 2 Settings', inline = '2')
ma2_length = input.int(defval=100, title=' ', minval=1,  group='MA 2 Settings', inline = '2')
amount_to_show2 = input.int(100, title = 'Bars Back to Show', group = 'MA 2 Settings', inline = '2')
ma2_color = input.color(color.yellow, title = 'Color', group = 'MA 2 Settings', inline = '2')

use_ma3 = input.bool(title='MA 3', defval=true, group='MA 3 Settings', inline = '3')
ma3_type = input.string(title=' ', defval='SMA', options=['SMA', 'EMA', 'SMMA (RMA)', 'WMA', 'VWMA'],  group='MA 3 Settings', inline = '3')
ma3_source = input.source(title=' ', defval=close, group='MA 3 Settings', inline = '3')
ma3_length = input.int(defval=200, title=' ', minval=1,  group='MA 3 Settings', inline = '3')
amount_to_show3 = input.int(200, title = 'Bars Back to Show', group = 'MA 3 Settings', inline = '2')
ma3_color = input.color(color.orange, title = 'Color', group = 'MA 3 Settings', inline = '2')


// calculate ma
ma(source, length, type) =>
    type == 'SMA' ? ta.sma(source, length) : type == 'EMA' ? ta.ema(source, length) : type == 'SMMA (RMA)' ? ta.rma(source, length) : type == 'WMA' ? ta.wma(source, length) : type == 'VWMA' ? ta.vwma(source, length) : na
ma1 = use_ma1 ? ma(ma1_source, ma1_length, ma1_type) : na
ma2 = use_ma2 ? ma(ma2_source, ma2_length, ma2_type) : na
ma3 = use_ma3 ? ma(ma3_source, ma3_length, ma3_type) : na


plot(ma1, title = 'MA 1', show_last = amount_to_show1, color = ma1_color, editable = false)
plot(ma2, title = 'MA 2', show_last = amount_to_show2, color = ma2_color, editable = false)
plot(ma3, title = 'MA 3', show_last = amount_to_show3, color = ma3_color, editable = false)


// labels
var label ma1_label = na
var label ma2_label = na
var label ma3_label = na

if barstate.islast and show_labels

    // label 1
    if not na(ma1_label)
        label.delete(ma1_label[1])
    label.new(x=bar_index+1, y=ma1, text = str.tostring(ma1_length) + ma1_type, color = ma1_color, style = label.style_label_left,
     size = size.small)

    // label 2
    if not na(ma2_label)
        label.delete(ma2_label[1])
    label.new(x=bar_index+1, y=ma2, text = str.tostring(ma2_length) + ma2_type, color = ma2_color, style = label.style_label_left,
     size = size.small)

    // label 3
    if not na(ma3_label)
        label.delete(ma3_label[1])
    label.new(x=bar_index+1, y=ma3, text = str.tostring(ma3_length) + ma3_type, color = ma3_color, style = label.style_label_left,
     size = size.small)
