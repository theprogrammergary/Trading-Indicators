//@version=5
indicator("Vix Inverse Indicator", overlay = false,  precision=2)

symbol = input.symbol('VIX', title = 'Symbol to Use', group = 'Symbol Settings')
symbol_tf = input.timeframe('', title = 'Timeframe to Use', group = 'Symbol Settings')

source_open = request.security(symbol, symbol_tf, symbol_tf == '' ? open : open[1], lookahead = barmerge.lookahead_on)
source_high = request.security(symbol, symbol_tf, symbol_tf == '' ? high : high[1], lookahead = barmerge.lookahead_on)
source_low = request.security(symbol, symbol_tf, symbol_tf == '' ? low : low[1], lookahead = barmerge.lookahead_on)
source_close = request.security(symbol, symbol_tf, symbol_tf == '' ? close : close[1], lookahead = barmerge.lookahead_on)

//RSI
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = source_close
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="RSI Settings")
maLengthInput = input.int(14, title="MA Length", group="RSI Settings")

up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ma(rsi, maLengthInput, maTypeInput)

plot((rsi*-1)+100, "RSI", color=color.blue, style = plot.style_line, join = true, linewidth = 2)
plot((rsiMA*-1)+100, "RSI-based MA", color=color.new(color.yellow,50))
rsiUpperBand = hline(70, "RSI Upper Band", color=#787B86)
hline(50, "RSI Middle Band", color=color.new(#787B86, 50))
rsiLowerBand = hline(30, "RSI Lower Band", color=#787B86)
fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")


// HA

len = input.int(10, minval=1, maxval=500, title="Length", group="Heikin Ashi Moving Average", tooltip="Set moving average length.")

haClose = (source_open + source_high + source_low + source_close) / 4
haOpen = float(na)
haOpen := na(haOpen[1]) ? (source_open + source_close) / 2 : (nz(haOpen[1]) + nz(haClose[1])) / 2
haHigh = math.max(source_high, math.max(haOpen, haClose))
haLow = math.min(source_low, math.min(haOpen, haClose))

col_ = haClose>haOpen?color.rgb(193, 62, 62):color.rgb(59, 191, 103)

/////
periodK = input.int(14, title="Stoch %K Length", minval=1, group = 'Stoch Settings')
smoothK = input.int(3, title="Stock %K Smoothing", minval=1, group = 'Stoch Settings')
periodD = input.int(3, title="Stock %D Smoothing", minval=1, group = 'Stoch Settings')
k = ta.sma(ta.stoch(source_close, source_high, source_low, periodK), smoothK)
d = ta.sma(k, periodD)


kline = plot(((k)*-1)+100, title="%K", color=#2962ffb1)
dline = plot(((d)*-1)+100, title="%D", color=#ff6f007e)
kline1 = ((k)*-1)+100
dline1 = ((d)*-1)+100
//bodyMiddle1 = plot((kline1+dline1)-70, display=display.none)
//bodyMiddle2 = plot((kline1-dline1)+70, display=display.none)
//fill(bodyMiddle1,kline, color.new(#2962ff, 61), fillgaps=true)
//fill(bodyMiddle2,dline , color.new(#ff6f00, 61), fillgaps=false)
//h0 = hline(80, "Upper Band", color=#787B86)
//hline(50, "Middle Band", color=color.new(#787B86, 50))
//h1 = hline(20, "Lower Band", color=#787B86)
//fill(h0, h1, color=color.rgb(33, 150, 243, 90), title="Background")

///////////////////////////////////////////////////////////////////////////////// Heikin Ashi Moving Average
avg = math.avg(haOpen,haHigh,haLow,haClose)
HA_movingAverage = ta.wma(avg, len)
col = HA_movingAverage>HA_movingAverage[1]? color.new(#e14949, 0) : color.new(#5bcd45, 0)

// plot(HA_movingAverage, color=col, style=plot.style_circles, linewidth=2)

plot(0, title = 'HA Trend', color = col, style = plot.style_circles, linewidth = 2)
